
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQUALNEQUALleftLTLTEGTGTEleftPLUSMINUSleftMULTIPLYDIVMODrightNOTAND ASSIGN BOOL BREAK CHAR CHARACTER COMMA CONTINUE DIV DOT ELSE EQUAL FALSE FLOAT FOR GT GTE IF INT LBRACE LBRACKET LPAREN LT LTE MAIN MINUS MOD MULTIPLY NEQUAL NOME NOT NUMBER OR PLUS PRINTF RBRACE RBRACKET RETURN RPAREN SCANF SEMICOLON SQUOTE TRUE VOID WHILEprogram : INT MAIN LPAREN RPAREN blocosinal : NOT PLUS\n        | NOT MINUS\n        | NOT\n        | PLUS\n        | MINUScomando : declaration\n        | assignment\n        | if_statement\n        | while_statement\n        | for_statement\n        | bloco\n        | break_statement\n        | continue_statement\n        | return_statement\n        | printf_statement\n        | scanf_statementcomandos : comando comandos\n        | comandobloco : LBRACE comandos RBRACE\n        | LBRACE RBRACEparentheses : LPAREN valor RPARENtype : INT\n        | FLOAT\n        | CHAR\n        | VOID\n        | BOOLoperador : MULTIPLY\n        | DIV\n        | MOD\n        | PLUS\n        | MINUS\n        | EQUAL\n        | NEQUAL\n        | GT\n        | LT\n        | GTE\n        | LTE\n        | AND\n        | OR\n        boolean : TRUE\n        | FALSEvalor : NUMBER\n        | NOME\n        | CHARACTER\n        | boolean\n        | operation\n        | parentheses\n        operation : valor operador valor\n        assignment : NOME ASSIGN valordeclaration_list : NOME\n        | NOME declaration_list\n        | NOME ASSIGN valor\n        | NOME ASSIGN valor COMMA declaration_listdeclaration : type declaration_list SEMICOLONif_statement : IF LPAREN valor RPAREN blocowhile_statement : WHILE LPAREN valor RPAREN blocofor_statement : FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comandofor_init : assignment\n        | declaration\n        | valor\n        | empty\n        | assignment for_comma\n        | valor for_comma\n        | declaration for_comma\n        for_comma : COMMA assignment\n        | COMMA valor SEMICOLON\n        | COMMA assignment for_commafor_condition : assignment\n        | valor\n        | valor for_comma\n        | assignment for_comma\n        | emptyfor_update : assignment\n        | valor\n        | valor for_comma\n        | assignment for_comma\n        | emptyscanf_statement : SCANF LPAREN NOME RPAREN SEMICOLONprintf_statement : PRINTF LPAREN valor RPAREN SEMICOLONbreak_statement : BREAK SEMICOLONcontinue_statement : CONTINUE SEMICOLONreturn_statement : RETURN valor SEMICOLONempty :'
    
_lr_action_items = {'INT':([0,7,9,10,11,12,13,14,15,16,17,18,19,20,21,37,44,45,46,48,49,50,51,52,53,54,55,59,62,71,97,98,102,103,110,111,122,125,],[2,32,-21,32,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-20,32,-81,-82,-43,-44,-45,-46,-47,-48,-41,-42,-55,-50,-83,-49,-22,-56,-57,-80,-79,32,-58,]),'$end':([1,6,9,37,],[0,-1,-21,-20,]),'MAIN':([2,],[3,]),'LPAREN':([3,24,25,26,29,30,31,41,42,43,44,56,57,61,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,94,113,],[4,42,43,44,56,57,58,56,56,56,56,56,56,56,56,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,56,56,56,]),'RPAREN':([4,48,49,50,51,52,53,54,55,62,63,64,70,86,87,88,97,98,108,113,116,117,118,119,120,121,123,124,],[5,-43,-44,-45,-46,-47,-48,-41,-42,-50,90,91,-44,98,99,100,-49,-22,-66,-84,-68,-67,122,-74,-75,-78,-77,-76,]),'LBRACE':([5,7,9,10,11,12,13,14,15,16,17,18,19,20,21,37,45,46,48,49,50,51,52,53,54,55,59,62,71,90,91,97,98,102,103,110,111,122,125,],[7,7,-21,7,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-20,-81,-82,-43,-44,-45,-46,-47,-48,-41,-42,-55,-50,-83,7,7,-49,-22,-56,-57,-80,-79,7,-58,]),'RBRACE':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,37,38,45,46,48,49,50,51,52,53,54,55,59,62,71,97,98,102,103,110,111,125,],[9,37,-21,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-20,-18,-81,-82,-43,-44,-45,-46,-47,-48,-41,-42,-55,-50,-83,-49,-22,-56,-57,-80,-79,-58,]),'NOME':([7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,29,32,33,34,35,36,37,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,56,57,58,59,61,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,94,97,98,101,102,103,110,111,113,122,125,],[23,-21,23,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,40,49,-23,-24,-25,-26,-27,-20,40,49,49,49,70,-81,-82,-43,-44,-45,-46,-47,-48,-41,-42,49,49,88,-55,49,-50,-83,49,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,70,70,-49,-22,40,-56,-57,-80,-79,70,23,-58,]),'IF':([7,9,10,11,12,13,14,15,16,17,18,19,20,21,37,45,46,48,49,50,51,52,53,54,55,59,62,71,97,98,102,103,110,111,122,125,],[24,-21,24,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-20,-81,-82,-43,-44,-45,-46,-47,-48,-41,-42,-55,-50,-83,-49,-22,-56,-57,-80,-79,24,-58,]),'WHILE':([7,9,10,11,12,13,14,15,16,17,18,19,20,21,37,45,46,48,49,50,51,52,53,54,55,59,62,71,97,98,102,103,110,111,122,125,],[25,-21,25,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-20,-81,-82,-43,-44,-45,-46,-47,-48,-41,-42,-55,-50,-83,-49,-22,-56,-57,-80,-79,25,-58,]),'FOR':([7,9,10,11,12,13,14,15,16,17,18,19,20,21,37,45,46,48,49,50,51,52,53,54,55,59,62,71,97,98,102,103,110,111,122,125,],[26,-21,26,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-20,-81,-82,-43,-44,-45,-46,-47,-48,-41,-42,-55,-50,-83,-49,-22,-56,-57,-80,-79,26,-58,]),'BREAK':([7,9,10,11,12,13,14,15,16,17,18,19,20,21,37,45,46,48,49,50,51,52,53,54,55,59,62,71,97,98,102,103,110,111,122,125,],[27,-21,27,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-20,-81,-82,-43,-44,-45,-46,-47,-48,-41,-42,-55,-50,-83,-49,-22,-56,-57,-80,-79,27,-58,]),'CONTINUE':([7,9,10,11,12,13,14,15,16,17,18,19,20,21,37,45,46,48,49,50,51,52,53,54,55,59,62,71,97,98,102,103,110,111,122,125,],[28,-21,28,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-20,-81,-82,-43,-44,-45,-46,-47,-48,-41,-42,-55,-50,-83,-49,-22,-56,-57,-80,-79,28,-58,]),'RETURN':([7,9,10,11,12,13,14,15,16,17,18,19,20,21,37,45,46,48,49,50,51,52,53,54,55,59,62,71,97,98,102,103,110,111,122,125,],[29,-21,29,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-20,-81,-82,-43,-44,-45,-46,-47,-48,-41,-42,-55,-50,-83,-49,-22,-56,-57,-80,-79,29,-58,]),'PRINTF':([7,9,10,11,12,13,14,15,16,17,18,19,20,21,37,45,46,48,49,50,51,52,53,54,55,59,62,71,97,98,102,103,110,111,122,125,],[30,-21,30,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-20,-81,-82,-43,-44,-45,-46,-47,-48,-41,-42,-55,-50,-83,-49,-22,-56,-57,-80,-79,30,-58,]),'SCANF':([7,9,10,11,12,13,14,15,16,17,18,19,20,21,37,45,46,48,49,50,51,52,53,54,55,59,62,71,97,98,102,103,110,111,122,125,],[31,-21,31,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-20,-81,-82,-43,-44,-45,-46,-47,-48,-41,-42,-55,-50,-83,-49,-22,-56,-57,-80,-79,31,-58,]),'FLOAT':([7,9,10,11,12,13,14,15,16,17,18,19,20,21,37,44,45,46,48,49,50,51,52,53,54,55,59,62,71,97,98,102,103,110,111,122,125,],[33,-21,33,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-20,33,-81,-82,-43,-44,-45,-46,-47,-48,-41,-42,-55,-50,-83,-49,-22,-56,-57,-80,-79,33,-58,]),'CHAR':([7,9,10,11,12,13,14,15,16,17,18,19,20,21,37,44,45,46,48,49,50,51,52,53,54,55,59,62,71,97,98,102,103,110,111,122,125,],[34,-21,34,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-20,34,-81,-82,-43,-44,-45,-46,-47,-48,-41,-42,-55,-50,-83,-49,-22,-56,-57,-80,-79,34,-58,]),'VOID':([7,9,10,11,12,13,14,15,16,17,18,19,20,21,37,44,45,46,48,49,50,51,52,53,54,55,59,62,71,97,98,102,103,110,111,122,125,],[35,-21,35,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-20,35,-81,-82,-43,-44,-45,-46,-47,-48,-41,-42,-55,-50,-83,-49,-22,-56,-57,-80,-79,35,-58,]),'BOOL':([7,9,10,11,12,13,14,15,16,17,18,19,20,21,37,44,45,46,48,49,50,51,52,53,54,55,59,62,71,97,98,102,103,110,111,122,125,],[36,-21,36,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-20,36,-81,-82,-43,-44,-45,-46,-47,-48,-41,-42,-55,-50,-83,-49,-22,-56,-57,-80,-79,36,-58,]),'ASSIGN':([23,40,70,],[41,61,41,]),'SEMICOLON':([27,28,39,40,44,47,48,49,50,51,52,53,54,55,59,60,62,65,66,67,68,69,70,89,92,93,95,96,97,98,99,100,104,105,106,107,108,109,112,114,115,116,117,],[45,46,59,-51,-84,71,-43,-44,-45,-46,-47,-48,-41,-42,-55,-52,-50,92,-59,-60,-61,-62,-44,-53,-84,-63,-65,-64,-49,-22,110,111,113,-69,-70,-73,-66,117,-54,-72,-71,-68,-67,]),'NUMBER':([29,41,42,43,44,56,57,61,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,94,113,],[48,48,48,48,48,48,48,48,48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,48,48,48,]),'CHARACTER':([29,41,42,43,44,56,57,61,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,94,113,],[50,50,50,50,50,50,50,50,50,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,50,50,50,]),'TRUE':([29,41,42,43,44,56,57,61,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,94,113,],[54,54,54,54,54,54,54,54,54,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,54,54,54,]),'FALSE':([29,41,42,43,44,56,57,61,72,73,74,75,76,77,78,79,80,81,82,83,84,85,92,94,113,],[55,55,55,55,55,55,55,55,55,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,55,55,55,]),'MULTIPLY':([47,48,49,50,51,52,53,54,55,62,63,64,68,70,86,87,89,97,98,106,109,120,],[73,-43,-44,-45,-46,-47,-48,-41,-42,73,73,73,73,-44,73,73,73,73,-22,73,73,73,]),'DIV':([47,48,49,50,51,52,53,54,55,62,63,64,68,70,86,87,89,97,98,106,109,120,],[74,-43,-44,-45,-46,-47,-48,-41,-42,74,74,74,74,-44,74,74,74,74,-22,74,74,74,]),'MOD':([47,48,49,50,51,52,53,54,55,62,63,64,68,70,86,87,89,97,98,106,109,120,],[75,-43,-44,-45,-46,-47,-48,-41,-42,75,75,75,75,-44,75,75,75,75,-22,75,75,75,]),'PLUS':([47,48,49,50,51,52,53,54,55,62,63,64,68,70,86,87,89,97,98,106,109,120,],[76,-43,-44,-45,-46,-47,-48,-41,-42,76,76,76,76,-44,76,76,76,76,-22,76,76,76,]),'MINUS':([47,48,49,50,51,52,53,54,55,62,63,64,68,70,86,87,89,97,98,106,109,120,],[77,-43,-44,-45,-46,-47,-48,-41,-42,77,77,77,77,-44,77,77,77,77,-22,77,77,77,]),'EQUAL':([47,48,49,50,51,52,53,54,55,62,63,64,68,70,86,87,89,97,98,106,109,120,],[78,-43,-44,-45,-46,-47,-48,-41,-42,78,78,78,78,-44,78,78,78,78,-22,78,78,78,]),'NEQUAL':([47,48,49,50,51,52,53,54,55,62,63,64,68,70,86,87,89,97,98,106,109,120,],[79,-43,-44,-45,-46,-47,-48,-41,-42,79,79,79,79,-44,79,79,79,79,-22,79,79,79,]),'GT':([47,48,49,50,51,52,53,54,55,62,63,64,68,70,86,87,89,97,98,106,109,120,],[80,-43,-44,-45,-46,-47,-48,-41,-42,80,80,80,80,-44,80,80,80,80,-22,80,80,80,]),'LT':([47,48,49,50,51,52,53,54,55,62,63,64,68,70,86,87,89,97,98,106,109,120,],[81,-43,-44,-45,-46,-47,-48,-41,-42,81,81,81,81,-44,81,81,81,81,-22,81,81,81,]),'GTE':([47,48,49,50,51,52,53,54,55,62,63,64,68,70,86,87,89,97,98,106,109,120,],[82,-43,-44,-45,-46,-47,-48,-41,-42,82,82,82,82,-44,82,82,82,82,-22,82,82,82,]),'LTE':([47,48,49,50,51,52,53,54,55,62,63,64,68,70,86,87,89,97,98,106,109,120,],[83,-43,-44,-45,-46,-47,-48,-41,-42,83,83,83,83,-44,83,83,83,83,-22,83,83,83,]),'AND':([47,48,49,50,51,52,53,54,55,62,63,64,68,70,86,87,89,97,98,106,109,120,],[84,-43,-44,-45,-46,-47,-48,-41,-42,84,84,84,84,-44,84,84,84,84,-22,84,84,84,]),'OR':([47,48,49,50,51,52,53,54,55,62,63,64,68,70,86,87,89,97,98,106,109,120,],[85,-43,-44,-45,-46,-47,-48,-41,-42,85,85,85,85,-44,85,85,85,85,-22,85,85,85,]),'COMMA':([48,49,50,51,52,53,54,55,59,62,66,67,68,70,89,97,98,105,106,108,119,120,],[-43,-44,-45,-46,-47,-48,-41,-42,-55,-50,94,94,94,-44,101,-49,-22,94,94,94,94,94,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'bloco':([5,7,10,90,91,122,],[6,16,16,102,103,16,]),'comandos':([7,10,],[8,38,]),'comando':([7,10,122,],[10,10,125,]),'declaration':([7,10,44,122,],[11,11,67,11,]),'assignment':([7,10,44,92,94,113,122,],[12,12,66,105,108,119,12,]),'if_statement':([7,10,122,],[13,13,13,]),'while_statement':([7,10,122,],[14,14,14,]),'for_statement':([7,10,122,],[15,15,15,]),'break_statement':([7,10,122,],[17,17,17,]),'continue_statement':([7,10,122,],[18,18,18,]),'return_statement':([7,10,122,],[19,19,19,]),'printf_statement':([7,10,122,],[20,20,20,]),'scanf_statement':([7,10,122,],[21,21,21,]),'type':([7,10,44,122,],[22,22,22,22,]),'declaration_list':([22,40,101,],[39,60,112,]),'valor':([29,41,42,43,44,56,57,61,72,92,94,113,],[47,62,63,64,68,86,87,89,97,106,109,120,]),'boolean':([29,41,42,43,44,56,57,61,72,92,94,113,],[51,51,51,51,51,51,51,51,51,51,51,51,]),'operation':([29,41,42,43,44,56,57,61,72,92,94,113,],[52,52,52,52,52,52,52,52,52,52,52,52,]),'parentheses':([29,41,42,43,44,56,57,61,72,92,94,113,],[53,53,53,53,53,53,53,53,53,53,53,53,]),'for_init':([44,],[65,]),'empty':([44,92,113,],[69,107,121,]),'operador':([47,62,63,64,68,86,87,89,97,106,109,120,],[72,72,72,72,72,72,72,72,72,72,72,72,]),'for_comma':([66,67,68,105,106,108,119,120,],[93,95,96,114,115,116,123,124,]),'for_condition':([92,],[104,]),'for_update':([113,],[118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> INT MAIN LPAREN RPAREN bloco','program',5,'p_program','emoji_parser.py',58),
  ('sinal -> NOT PLUS','sinal',2,'p_sinal','emoji_parser.py',62),
  ('sinal -> NOT MINUS','sinal',2,'p_sinal','emoji_parser.py',63),
  ('sinal -> NOT','sinal',1,'p_sinal','emoji_parser.py',64),
  ('sinal -> PLUS','sinal',1,'p_sinal','emoji_parser.py',65),
  ('sinal -> MINUS','sinal',1,'p_sinal','emoji_parser.py',66),
  ('comando -> declaration','comando',1,'p_comando','emoji_parser.py',70),
  ('comando -> assignment','comando',1,'p_comando','emoji_parser.py',71),
  ('comando -> if_statement','comando',1,'p_comando','emoji_parser.py',72),
  ('comando -> while_statement','comando',1,'p_comando','emoji_parser.py',73),
  ('comando -> for_statement','comando',1,'p_comando','emoji_parser.py',74),
  ('comando -> bloco','comando',1,'p_comando','emoji_parser.py',75),
  ('comando -> break_statement','comando',1,'p_comando','emoji_parser.py',76),
  ('comando -> continue_statement','comando',1,'p_comando','emoji_parser.py',77),
  ('comando -> return_statement','comando',1,'p_comando','emoji_parser.py',78),
  ('comando -> printf_statement','comando',1,'p_comando','emoji_parser.py',79),
  ('comando -> scanf_statement','comando',1,'p_comando','emoji_parser.py',80),
  ('comandos -> comando comandos','comandos',2,'p_comandos','emoji_parser.py',84),
  ('comandos -> comando','comandos',1,'p_comandos','emoji_parser.py',85),
  ('bloco -> LBRACE comandos RBRACE','bloco',3,'p_bloco','emoji_parser.py',94),
  ('bloco -> LBRACE RBRACE','bloco',2,'p_bloco','emoji_parser.py',95),
  ('parentheses -> LPAREN valor RPAREN','parentheses',3,'p_parentheses','emoji_parser.py',104),
  ('type -> INT','type',1,'p_type','emoji_parser.py',108),
  ('type -> FLOAT','type',1,'p_type','emoji_parser.py',109),
  ('type -> CHAR','type',1,'p_type','emoji_parser.py',110),
  ('type -> VOID','type',1,'p_type','emoji_parser.py',111),
  ('type -> BOOL','type',1,'p_type','emoji_parser.py',112),
  ('operador -> MULTIPLY','operador',1,'p_operador','emoji_parser.py',118),
  ('operador -> DIV','operador',1,'p_operador','emoji_parser.py',119),
  ('operador -> MOD','operador',1,'p_operador','emoji_parser.py',120),
  ('operador -> PLUS','operador',1,'p_operador','emoji_parser.py',121),
  ('operador -> MINUS','operador',1,'p_operador','emoji_parser.py',122),
  ('operador -> EQUAL','operador',1,'p_operador','emoji_parser.py',123),
  ('operador -> NEQUAL','operador',1,'p_operador','emoji_parser.py',124),
  ('operador -> GT','operador',1,'p_operador','emoji_parser.py',125),
  ('operador -> LT','operador',1,'p_operador','emoji_parser.py',126),
  ('operador -> GTE','operador',1,'p_operador','emoji_parser.py',127),
  ('operador -> LTE','operador',1,'p_operador','emoji_parser.py',128),
  ('operador -> AND','operador',1,'p_operador','emoji_parser.py',129),
  ('operador -> OR','operador',1,'p_operador','emoji_parser.py',130),
  ('boolean -> TRUE','boolean',1,'p_boolean','emoji_parser.py',135),
  ('boolean -> FALSE','boolean',1,'p_boolean','emoji_parser.py',136),
  ('valor -> NUMBER','valor',1,'p_valor','emoji_parser.py',140),
  ('valor -> NOME','valor',1,'p_valor','emoji_parser.py',141),
  ('valor -> CHARACTER','valor',1,'p_valor','emoji_parser.py',142),
  ('valor -> boolean','valor',1,'p_valor','emoji_parser.py',143),
  ('valor -> operation','valor',1,'p_valor','emoji_parser.py',144),
  ('valor -> parentheses','valor',1,'p_valor','emoji_parser.py',145),
  ('operation -> valor operador valor','operation',3,'p_operation','emoji_parser.py',150),
  ('assignment -> NOME ASSIGN valor','assignment',3,'p_assignment','emoji_parser.py',163),
  ('declaration_list -> NOME','declaration_list',1,'p_declaration_list','emoji_parser.py',175),
  ('declaration_list -> NOME declaration_list','declaration_list',2,'p_declaration_list','emoji_parser.py',176),
  ('declaration_list -> NOME ASSIGN valor','declaration_list',3,'p_declaration_list','emoji_parser.py',177),
  ('declaration_list -> NOME ASSIGN valor COMMA declaration_list','declaration_list',5,'p_declaration_list','emoji_parser.py',178),
  ('declaration -> type declaration_list SEMICOLON','declaration',3,'p_declaration','emoji_parser.py',266),
  ('if_statement -> IF LPAREN valor RPAREN bloco','if_statement',5,'p_if_statement','emoji_parser.py',270),
  ('while_statement -> WHILE LPAREN valor RPAREN bloco','while_statement',5,'p_while_statement','emoji_parser.py',274),
  ('for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando','for_statement',9,'p_for_statement','emoji_parser.py',278),
  ('for_init -> assignment','for_init',1,'p_for_init','emoji_parser.py',282),
  ('for_init -> declaration','for_init',1,'p_for_init','emoji_parser.py',283),
  ('for_init -> valor','for_init',1,'p_for_init','emoji_parser.py',284),
  ('for_init -> empty','for_init',1,'p_for_init','emoji_parser.py',285),
  ('for_init -> assignment for_comma','for_init',2,'p_for_init','emoji_parser.py',286),
  ('for_init -> valor for_comma','for_init',2,'p_for_init','emoji_parser.py',287),
  ('for_init -> declaration for_comma','for_init',2,'p_for_init','emoji_parser.py',288),
  ('for_comma -> COMMA assignment','for_comma',2,'p_for_comma','emoji_parser.py',296),
  ('for_comma -> COMMA valor SEMICOLON','for_comma',3,'p_for_comma','emoji_parser.py',297),
  ('for_comma -> COMMA assignment for_comma','for_comma',3,'p_for_comma','emoji_parser.py',298),
  ('for_condition -> assignment','for_condition',1,'p_for_condition','emoji_parser.py',305),
  ('for_condition -> valor','for_condition',1,'p_for_condition','emoji_parser.py',306),
  ('for_condition -> valor for_comma','for_condition',2,'p_for_condition','emoji_parser.py',307),
  ('for_condition -> assignment for_comma','for_condition',2,'p_for_condition','emoji_parser.py',308),
  ('for_condition -> empty','for_condition',1,'p_for_condition','emoji_parser.py',309),
  ('for_update -> assignment','for_update',1,'p_for_update','emoji_parser.py',316),
  ('for_update -> valor','for_update',1,'p_for_update','emoji_parser.py',317),
  ('for_update -> valor for_comma','for_update',2,'p_for_update','emoji_parser.py',318),
  ('for_update -> assignment for_comma','for_update',2,'p_for_update','emoji_parser.py',319),
  ('for_update -> empty','for_update',1,'p_for_update','emoji_parser.py',320),
  ('scanf_statement -> SCANF LPAREN NOME RPAREN SEMICOLON','scanf_statement',5,'p_scanf_statement','emoji_parser.py',328),
  ('printf_statement -> PRINTF LPAREN valor RPAREN SEMICOLON','printf_statement',5,'p_printf_statement','emoji_parser.py',333),
  ('break_statement -> BREAK SEMICOLON','break_statement',2,'p_break_statement','emoji_parser.py',338),
  ('continue_statement -> CONTINUE SEMICOLON','continue_statement',2,'p_continue_statement','emoji_parser.py',343),
  ('return_statement -> RETURN valor SEMICOLON','return_statement',3,'p_return_statement','emoji_parser.py',349),
  ('empty -> <empty>','empty',0,'p_empty','emoji_parser.py',354),
]
