
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQUALNEQUALleftLTLTEGTGTEleftPLUSMINUSleftMULTIPLYDIVMODrightNOTAND ASSIGN BOOL BREAK CHAR CHARACTER COMMA CONTINUE DIV DOT ELSE EQUAL FALSE FLOAT FOR GT GTE IF INT LBRACE LBRACKET LPAREN LT LTE MAIN MINUS MOD MULTIPLY NEQUAL NOME NOT NUMBER OR PLUS PRINTF RBRACE RBRACKET RETURN RPAREN SCANF SEMICOLON SQUOTE TRUE VOID WHILEprogram : INT MAIN LPAREN RPAREN blococomando : declaration\n        | if_statement\n        | while_statement\n        | for_statement\n        | break_statement\n        | continue_statement\n        | return_statementtype : INT\n        | FLOAT\n        | CHAR\n        | VOID\n        | BOOLoperador : MULTIPLY\n        | DIV\n        | MOD\n        | PLUS\n        | MINUS\n        | EQUAL\n        | NEQUAL\n        | GT\n        | LT\n        | GTE\n        | LTE\n        | AND\n        | OR\n        boolean : TRUE\n        | FALSEvalor : NUMBER\n        | CHARACTER\n        | boolean\n        | operation\n        | parentheses\n        operation : valor operador valor\n        assignment : NOME valordeclare : type NOME valordeclaration : type NOME ASSIGN valor SEMICOLON\n        | type NOME SEMICOLONparentheses : LPAREN valor RPARENbloco : LBRACE comando RBRACE\n        | LBRACE RBRACEif_statement : IF LPAREN valor RPAREN LBRACE bloco RBRACEwhile_statement : WHILE LPAREN valor RPAREN LBRACE bloco RBRACEfor_statement : FOR LPAREN assignment_or_declaration_or_value SEMICOLON assignment_or_value SEMICOLON assignment_or_value RPAREN comandoassignment_or_declaration_or_value : assignment\n        | declaration\n        | valorassignment_or_value : assignment\n        | valorscanf_statement : SCANF LPAREN NOME RPAREN SEMICOLONprintf_statement : PRINTF LPAREN valor RPAREN SEMICOLONbreak_statement : BREAK SEMICOLONcontinue_statement : CONTINUE SEMICOLONreturn_statement : RETURN valor SEMICOLON'
    
_lr_action_items = {'INT':([0,7,33,89,],[2,24,24,24,]),'$end':([1,6,9,29,],[0,-1,-41,-40,]),'MAIN':([2,],[3,]),'LPAREN':([3,18,19,20,23,31,32,33,44,45,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,85,],[4,31,32,33,44,44,44,44,44,44,44,44,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,44,44,]),'RPAREN':([4,37,38,39,40,41,42,43,47,48,69,74,75,76,81,82,88,],[5,-29,-30,-31,-32,-33,-27,-28,71,72,76,-35,-34,-39,-48,-49,89,]),'LBRACE':([5,71,72,78,79,],[7,78,79,7,7,]),'RBRACE':([7,8,9,10,11,12,13,14,15,16,29,34,35,46,54,77,83,84,86,87,90,],[9,29,-41,-2,-3,-4,-5,-6,-7,-8,-40,-52,-53,-38,-54,-37,86,87,-42,-43,-44,]),'IF':([7,89,],[18,18,]),'WHILE':([7,89,],[19,19,]),'FOR':([7,89,],[20,20,]),'BREAK':([7,89,],[21,21,]),'CONTINUE':([7,89,],[22,22,]),'RETURN':([7,89,],[23,23,]),'FLOAT':([7,33,89,],[25,25,25,]),'CHAR':([7,33,89,],[26,26,26,]),'VOID':([7,33,89,],[27,27,27,]),'BOOL':([7,33,89,],[28,28,28,]),'NOME':([17,24,25,26,27,28,33,73,85,],[30,-9,-10,-11,-12,-13,53,53,53,]),'SEMICOLON':([21,22,30,36,37,38,39,40,41,42,43,46,49,50,51,52,70,74,75,76,77,80,81,82,],[34,35,46,54,-29,-30,-31,-32,-33,-27,-28,-38,73,-45,-46,-47,77,-35,-34,-39,-37,85,-48,-49,]),'NUMBER':([23,31,32,33,44,45,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,85,],[37,37,37,37,37,37,37,37,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,37,37,]),'CHARACTER':([23,31,32,33,44,45,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,85,],[38,38,38,38,38,38,38,38,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,38,38,]),'TRUE':([23,31,32,33,44,45,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,85,],[42,42,42,42,42,42,42,42,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,42,42,]),'FALSE':([23,31,32,33,44,45,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,85,],[43,43,43,43,43,43,43,43,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,43,43,]),'ASSIGN':([30,],[45,]),'MULTIPLY':([36,37,38,39,40,41,42,43,47,48,52,69,70,74,75,76,82,],[56,-29,-30,-31,-32,-33,-27,-28,56,56,56,56,56,56,56,-39,56,]),'DIV':([36,37,38,39,40,41,42,43,47,48,52,69,70,74,75,76,82,],[57,-29,-30,-31,-32,-33,-27,-28,57,57,57,57,57,57,57,-39,57,]),'MOD':([36,37,38,39,40,41,42,43,47,48,52,69,70,74,75,76,82,],[58,-29,-30,-31,-32,-33,-27,-28,58,58,58,58,58,58,58,-39,58,]),'PLUS':([36,37,38,39,40,41,42,43,47,48,52,69,70,74,75,76,82,],[59,-29,-30,-31,-32,-33,-27,-28,59,59,59,59,59,59,59,-39,59,]),'MINUS':([36,37,38,39,40,41,42,43,47,48,52,69,70,74,75,76,82,],[60,-29,-30,-31,-32,-33,-27,-28,60,60,60,60,60,60,60,-39,60,]),'EQUAL':([36,37,38,39,40,41,42,43,47,48,52,69,70,74,75,76,82,],[61,-29,-30,-31,-32,-33,-27,-28,61,61,61,61,61,61,61,-39,61,]),'NEQUAL':([36,37,38,39,40,41,42,43,47,48,52,69,70,74,75,76,82,],[62,-29,-30,-31,-32,-33,-27,-28,62,62,62,62,62,62,62,-39,62,]),'GT':([36,37,38,39,40,41,42,43,47,48,52,69,70,74,75,76,82,],[63,-29,-30,-31,-32,-33,-27,-28,63,63,63,63,63,63,63,-39,63,]),'LT':([36,37,38,39,40,41,42,43,47,48,52,69,70,74,75,76,82,],[64,-29,-30,-31,-32,-33,-27,-28,64,64,64,64,64,64,64,-39,64,]),'GTE':([36,37,38,39,40,41,42,43,47,48,52,69,70,74,75,76,82,],[65,-29,-30,-31,-32,-33,-27,-28,65,65,65,65,65,65,65,-39,65,]),'LTE':([36,37,38,39,40,41,42,43,47,48,52,69,70,74,75,76,82,],[66,-29,-30,-31,-32,-33,-27,-28,66,66,66,66,66,66,66,-39,66,]),'AND':([36,37,38,39,40,41,42,43,47,48,52,69,70,74,75,76,82,],[67,-29,-30,-31,-32,-33,-27,-28,67,67,67,67,67,67,67,-39,67,]),'OR':([36,37,38,39,40,41,42,43,47,48,52,69,70,74,75,76,82,],[68,-29,-30,-31,-32,-33,-27,-28,68,68,68,68,68,68,68,-39,68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'bloco':([5,78,79,],[6,83,84,]),'comando':([7,89,],[8,90,]),'declaration':([7,33,89,],[10,51,10,]),'if_statement':([7,89,],[11,11,]),'while_statement':([7,89,],[12,12,]),'for_statement':([7,89,],[13,13,]),'break_statement':([7,89,],[14,14,]),'continue_statement':([7,89,],[15,15,]),'return_statement':([7,89,],[16,16,]),'type':([7,33,89,],[17,17,17,]),'valor':([23,31,32,33,44,45,53,55,73,85,],[36,47,48,52,69,70,74,75,82,82,]),'boolean':([23,31,32,33,44,45,53,55,73,85,],[39,39,39,39,39,39,39,39,39,39,]),'operation':([23,31,32,33,44,45,53,55,73,85,],[40,40,40,40,40,40,40,40,40,40,]),'parentheses':([23,31,32,33,44,45,53,55,73,85,],[41,41,41,41,41,41,41,41,41,41,]),'assignment_or_declaration_or_value':([33,],[49,]),'assignment':([33,73,85,],[50,81,81,]),'operador':([36,47,48,52,69,70,74,75,82,],[55,55,55,55,55,55,55,55,55,]),'assignment_or_value':([73,85,],[80,88,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> INT MAIN LPAREN RPAREN bloco','program',5,'p_program','emoji_parser.py',33),
  ('comando -> declaration','comando',1,'p_comando','emoji_parser.py',38),
  ('comando -> if_statement','comando',1,'p_comando','emoji_parser.py',39),
  ('comando -> while_statement','comando',1,'p_comando','emoji_parser.py',40),
  ('comando -> for_statement','comando',1,'p_comando','emoji_parser.py',41),
  ('comando -> break_statement','comando',1,'p_comando','emoji_parser.py',42),
  ('comando -> continue_statement','comando',1,'p_comando','emoji_parser.py',43),
  ('comando -> return_statement','comando',1,'p_comando','emoji_parser.py',44),
  ('type -> INT','type',1,'p_type','emoji_parser.py',49),
  ('type -> FLOAT','type',1,'p_type','emoji_parser.py',50),
  ('type -> CHAR','type',1,'p_type','emoji_parser.py',51),
  ('type -> VOID','type',1,'p_type','emoji_parser.py',52),
  ('type -> BOOL','type',1,'p_type','emoji_parser.py',53),
  ('operador -> MULTIPLY','operador',1,'p_operador','emoji_parser.py',57),
  ('operador -> DIV','operador',1,'p_operador','emoji_parser.py',58),
  ('operador -> MOD','operador',1,'p_operador','emoji_parser.py',59),
  ('operador -> PLUS','operador',1,'p_operador','emoji_parser.py',60),
  ('operador -> MINUS','operador',1,'p_operador','emoji_parser.py',61),
  ('operador -> EQUAL','operador',1,'p_operador','emoji_parser.py',62),
  ('operador -> NEQUAL','operador',1,'p_operador','emoji_parser.py',63),
  ('operador -> GT','operador',1,'p_operador','emoji_parser.py',64),
  ('operador -> LT','operador',1,'p_operador','emoji_parser.py',65),
  ('operador -> GTE','operador',1,'p_operador','emoji_parser.py',66),
  ('operador -> LTE','operador',1,'p_operador','emoji_parser.py',67),
  ('operador -> AND','operador',1,'p_operador','emoji_parser.py',68),
  ('operador -> OR','operador',1,'p_operador','emoji_parser.py',69),
  ('boolean -> TRUE','boolean',1,'p_boolean','emoji_parser.py',74),
  ('boolean -> FALSE','boolean',1,'p_boolean','emoji_parser.py',75),
  ('valor -> NUMBER','valor',1,'p_valor','emoji_parser.py',79),
  ('valor -> CHARACTER','valor',1,'p_valor','emoji_parser.py',80),
  ('valor -> boolean','valor',1,'p_valor','emoji_parser.py',81),
  ('valor -> operation','valor',1,'p_valor','emoji_parser.py',82),
  ('valor -> parentheses','valor',1,'p_valor','emoji_parser.py',83),
  ('operation -> valor operador valor','operation',3,'p_operation','emoji_parser.py',88),
  ('assignment -> NOME valor','assignment',2,'p_assignment','emoji_parser.py',92),
  ('declare -> type NOME valor','declare',3,'p_declare','emoji_parser.py',98),
  ('declaration -> type NOME ASSIGN valor SEMICOLON','declaration',5,'p_declaration','emoji_parser.py',103),
  ('declaration -> type NOME SEMICOLON','declaration',3,'p_declaration','emoji_parser.py',104),
  ('parentheses -> LPAREN valor RPAREN','parentheses',3,'p_parentheses','emoji_parser.py',111),
  ('bloco -> LBRACE comando RBRACE','bloco',3,'p_bloco','emoji_parser.py',116),
  ('bloco -> LBRACE RBRACE','bloco',2,'p_bloco','emoji_parser.py',117),
  ('if_statement -> IF LPAREN valor RPAREN LBRACE bloco RBRACE','if_statement',7,'p_if_statement','emoji_parser.py',123),
  ('while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco RBRACE','while_statement',7,'p_while_statement','emoji_parser.py',128),
  ('for_statement -> FOR LPAREN assignment_or_declaration_or_value SEMICOLON assignment_or_value SEMICOLON assignment_or_value RPAREN comando','for_statement',9,'p_for_statement','emoji_parser.py',132),
  ('assignment_or_declaration_or_value -> assignment','assignment_or_declaration_or_value',1,'p_assignment_or_declaration_or_value','emoji_parser.py',136),
  ('assignment_or_declaration_or_value -> declaration','assignment_or_declaration_or_value',1,'p_assignment_or_declaration_or_value','emoji_parser.py',137),
  ('assignment_or_declaration_or_value -> valor','assignment_or_declaration_or_value',1,'p_assignment_or_declaration_or_value','emoji_parser.py',138),
  ('assignment_or_value -> assignment','assignment_or_value',1,'p_assignment_or_value','emoji_parser.py',142),
  ('assignment_or_value -> valor','assignment_or_value',1,'p_assignment_or_value','emoji_parser.py',143),
  ('scanf_statement -> SCANF LPAREN NOME RPAREN SEMICOLON','scanf_statement',5,'p_scanf_statement','emoji_parser.py',148),
  ('printf_statement -> PRINTF LPAREN valor RPAREN SEMICOLON','printf_statement',5,'p_printf_statement','emoji_parser.py',153),
  ('break_statement -> BREAK SEMICOLON','break_statement',2,'p_break_statement','emoji_parser.py',158),
  ('continue_statement -> CONTINUE SEMICOLON','continue_statement',2,'p_continue_statement','emoji_parser.py',163),
  ('return_statement -> RETURN valor SEMICOLON','return_statement',3,'p_return_statement','emoji_parser.py',168),
]
