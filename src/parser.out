Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT
    ELSE
    LBRACKET
    RBRACKET
    SQUOTE

Grammar

Rule 0     S' -> program
Rule 1     program -> INT MAIN LPAREN RPAREN bloco
Rule 2     sinal -> NOT PLUS
Rule 3     sinal -> NOT MINUS
Rule 4     sinal -> NOT
Rule 5     sinal -> PLUS
Rule 6     sinal -> MINUS
Rule 7     comando -> declaration
Rule 8     comando -> assignment
Rule 9     comando -> if_statement
Rule 10    comando -> while_statement
Rule 11    comando -> for_statement
Rule 12    comando -> break_statement
Rule 13    comando -> continue_statement
Rule 14    comando -> return_statement
Rule 15    comandos -> comando comandos
Rule 16    comandos -> comando
Rule 17    bloco -> LBRACE comandos RBRACE
Rule 18    bloco -> LBRACE RBRACE
Rule 19    parentheses -> LPAREN valor RPAREN
Rule 20    type -> INT
Rule 21    type -> FLOAT
Rule 22    type -> CHAR
Rule 23    type -> VOID
Rule 24    type -> BOOL
Rule 25    operador -> MULTIPLY
Rule 26    operador -> DIV
Rule 27    operador -> MOD
Rule 28    operador -> PLUS
Rule 29    operador -> MINUS
Rule 30    operador -> EQUAL
Rule 31    operador -> NEQUAL
Rule 32    operador -> GT
Rule 33    operador -> LT
Rule 34    operador -> GTE
Rule 35    operador -> LTE
Rule 36    operador -> AND
Rule 37    operador -> OR
Rule 38    boolean -> TRUE
Rule 39    boolean -> FALSE
Rule 40    valor -> NUMBER
Rule 41    valor -> NOME
Rule 42    valor -> CHARACTER
Rule 43    valor -> boolean
Rule 44    valor -> operation
Rule 45    valor -> parentheses
Rule 46    operation -> valor operador valor
Rule 47    assignment -> NOME ASSIGN valor SEMICOLON
Rule 48    declaration_list -> NOME
Rule 49    declaration_list -> NOME declaration_list
Rule 50    declaration_list -> NOME ASSIGN valor
Rule 51    declaration_list -> NOME ASSIGN valor COMMA declaration_list
Rule 52    declaration -> type declaration_list SEMICOLON
Rule 53    if_statement -> IF LPAREN valor RPAREN LBRACE bloco RBRACE
Rule 54    while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco RBRACE
Rule 55    for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando
Rule 56    for_init -> assignment
Rule 57    for_init -> declaration
Rule 58    for_init -> valor
Rule 59    for_init -> empty
Rule 60    for_init -> assignment for_comma
Rule 61    for_init -> valor for_comma
Rule 62    for_init -> declaration for_comma
Rule 63    for_comma -> COMMA assignment
Rule 64    for_comma -> COMMA valor
Rule 65    for_comma -> COMMA assignment for_comma
Rule 66    for_condition -> assignment
Rule 67    for_condition -> valor
Rule 68    for_condition -> valor for_comma
Rule 69    for_condition -> assignment for_comma
Rule 70    for_condition -> empty
Rule 71    for_update -> assignment
Rule 72    for_update -> valor
Rule 73    for_update -> valor for_comma
Rule 74    for_update -> assignment for_comma
Rule 75    for_update -> empty
Rule 76    scanf_statement -> SCANF LPAREN NOME RPAREN SEMICOLON
Rule 77    printf_statement -> PRINTF LPAREN valor RPAREN SEMICOLON
Rule 78    break_statement -> BREAK SEMICOLON
Rule 79    continue_statement -> CONTINUE SEMICOLON
Rule 80    return_statement -> RETURN valor SEMICOLON
Rule 81    empty -> <empty>

Terminals, with rules where they appear

AND                  : 36
ASSIGN               : 47 50 51
BOOL                 : 24
BREAK                : 78
CHAR                 : 22
CHARACTER            : 42
COMMA                : 51 63 64 65
CONTINUE             : 79
DIV                  : 26
DOT                  : 
ELSE                 : 
EQUAL                : 30
FALSE                : 39
FLOAT                : 21
FOR                  : 55
GT                   : 32
GTE                  : 34
IF                   : 53
INT                  : 1 20
LBRACE               : 17 18 53 54
LBRACKET             : 
LPAREN               : 1 19 53 54 55 76 77
LT                   : 33
LTE                  : 35
MAIN                 : 1
MINUS                : 3 6 29
MOD                  : 27
MULTIPLY             : 25
NEQUAL               : 31
NOME                 : 41 47 48 49 50 51 76
NOT                  : 2 3 4
NUMBER               : 40
OR                   : 37
PLUS                 : 2 5 28
PRINTF               : 77
RBRACE               : 17 18 53 54
RBRACKET             : 
RETURN               : 80
RPAREN               : 1 19 53 54 55 76 77
SCANF                : 76
SEMICOLON            : 47 52 55 55 76 77 78 79 80
SQUOTE               : 
TRUE                 : 38
VOID                 : 23
WHILE                : 54
error                : 

Nonterminals, with rules where they appear

assignment           : 8 56 60 63 65 66 69 71 74
bloco                : 1 53 54
boolean              : 43
break_statement      : 12
comando              : 15 16 55
comandos             : 15 17
continue_statement   : 13
declaration          : 7 57 62
declaration_list     : 49 51 52
empty                : 59 70 75
for_comma            : 60 61 62 65 68 69 73 74
for_condition        : 55
for_init             : 55
for_statement        : 11
for_update           : 55
if_statement         : 9
operador             : 46
operation            : 44
parentheses          : 45
printf_statement     : 
program              : 0
return_statement     : 14
scanf_statement      : 
sinal                : 
type                 : 52
valor                : 19 46 46 47 50 51 53 54 58 61 64 67 68 72 73 77 80
while_statement      : 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . INT MAIN LPAREN RPAREN bloco

    INT             shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> INT . MAIN LPAREN RPAREN bloco

    MAIN            shift and go to state 3


state 3

    (1) program -> INT MAIN . LPAREN RPAREN bloco

    LPAREN          shift and go to state 4


state 4

    (1) program -> INT MAIN LPAREN . RPAREN bloco

    RPAREN          shift and go to state 5


state 5

    (1) program -> INT MAIN LPAREN RPAREN . bloco
    (17) bloco -> . LBRACE comandos RBRACE
    (18) bloco -> . LBRACE RBRACE

    LBRACE          shift and go to state 7

    bloco                          shift and go to state 6

state 6

    (1) program -> INT MAIN LPAREN RPAREN bloco .

    $end            reduce using rule 1 (program -> INT MAIN LPAREN RPAREN bloco .)


state 7

    (17) bloco -> LBRACE . comandos RBRACE
    (18) bloco -> LBRACE . RBRACE
    (15) comandos -> . comando comandos
    (16) comandos -> . comando
    (7) comando -> . declaration
    (8) comando -> . assignment
    (9) comando -> . if_statement
    (10) comando -> . while_statement
    (11) comando -> . for_statement
    (12) comando -> . break_statement
    (13) comando -> . continue_statement
    (14) comando -> . return_statement
    (52) declaration -> . type declaration_list SEMICOLON
    (47) assignment -> . NOME ASSIGN valor SEMICOLON
    (53) if_statement -> . IF LPAREN valor RPAREN LBRACE bloco RBRACE
    (54) while_statement -> . WHILE LPAREN valor RPAREN LBRACE bloco RBRACE
    (55) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando
    (78) break_statement -> . BREAK SEMICOLON
    (79) continue_statement -> . CONTINUE SEMICOLON
    (80) return_statement -> . RETURN valor SEMICOLON
    (20) type -> . INT
    (21) type -> . FLOAT
    (22) type -> . CHAR
    (23) type -> . VOID
    (24) type -> . BOOL

    RBRACE          shift and go to state 9
    NOME            shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    BREAK           shift and go to state 24
    CONTINUE        shift and go to state 25
    RETURN          shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 29
    VOID            shift and go to state 30
    BOOL            shift and go to state 31

    comandos                       shift and go to state 8
    comando                        shift and go to state 10
    declaration                    shift and go to state 11
    assignment                     shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    type                           shift and go to state 19

state 8

    (17) bloco -> LBRACE comandos . RBRACE

    RBRACE          shift and go to state 32


state 9

    (18) bloco -> LBRACE RBRACE .

    $end            reduce using rule 18 (bloco -> LBRACE RBRACE .)
    RBRACE          reduce using rule 18 (bloco -> LBRACE RBRACE .)


state 10

    (15) comandos -> comando . comandos
    (16) comandos -> comando .
    (15) comandos -> . comando comandos
    (16) comandos -> . comando
    (7) comando -> . declaration
    (8) comando -> . assignment
    (9) comando -> . if_statement
    (10) comando -> . while_statement
    (11) comando -> . for_statement
    (12) comando -> . break_statement
    (13) comando -> . continue_statement
    (14) comando -> . return_statement
    (52) declaration -> . type declaration_list SEMICOLON
    (47) assignment -> . NOME ASSIGN valor SEMICOLON
    (53) if_statement -> . IF LPAREN valor RPAREN LBRACE bloco RBRACE
    (54) while_statement -> . WHILE LPAREN valor RPAREN LBRACE bloco RBRACE
    (55) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando
    (78) break_statement -> . BREAK SEMICOLON
    (79) continue_statement -> . CONTINUE SEMICOLON
    (80) return_statement -> . RETURN valor SEMICOLON
    (20) type -> . INT
    (21) type -> . FLOAT
    (22) type -> . CHAR
    (23) type -> . VOID
    (24) type -> . BOOL

    RBRACE          reduce using rule 16 (comandos -> comando .)
    NOME            shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    BREAK           shift and go to state 24
    CONTINUE        shift and go to state 25
    RETURN          shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 29
    VOID            shift and go to state 30
    BOOL            shift and go to state 31

    comando                        shift and go to state 10
    comandos                       shift and go to state 33
    declaration                    shift and go to state 11
    assignment                     shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    type                           shift and go to state 19

state 11

    (7) comando -> declaration .

    NOME            reduce using rule 7 (comando -> declaration .)
    IF              reduce using rule 7 (comando -> declaration .)
    WHILE           reduce using rule 7 (comando -> declaration .)
    FOR             reduce using rule 7 (comando -> declaration .)
    BREAK           reduce using rule 7 (comando -> declaration .)
    CONTINUE        reduce using rule 7 (comando -> declaration .)
    RETURN          reduce using rule 7 (comando -> declaration .)
    INT             reduce using rule 7 (comando -> declaration .)
    FLOAT           reduce using rule 7 (comando -> declaration .)
    CHAR            reduce using rule 7 (comando -> declaration .)
    VOID            reduce using rule 7 (comando -> declaration .)
    BOOL            reduce using rule 7 (comando -> declaration .)
    RBRACE          reduce using rule 7 (comando -> declaration .)


state 12

    (8) comando -> assignment .

    NOME            reduce using rule 8 (comando -> assignment .)
    IF              reduce using rule 8 (comando -> assignment .)
    WHILE           reduce using rule 8 (comando -> assignment .)
    FOR             reduce using rule 8 (comando -> assignment .)
    BREAK           reduce using rule 8 (comando -> assignment .)
    CONTINUE        reduce using rule 8 (comando -> assignment .)
    RETURN          reduce using rule 8 (comando -> assignment .)
    INT             reduce using rule 8 (comando -> assignment .)
    FLOAT           reduce using rule 8 (comando -> assignment .)
    CHAR            reduce using rule 8 (comando -> assignment .)
    VOID            reduce using rule 8 (comando -> assignment .)
    BOOL            reduce using rule 8 (comando -> assignment .)
    RBRACE          reduce using rule 8 (comando -> assignment .)


state 13

    (9) comando -> if_statement .

    NOME            reduce using rule 9 (comando -> if_statement .)
    IF              reduce using rule 9 (comando -> if_statement .)
    WHILE           reduce using rule 9 (comando -> if_statement .)
    FOR             reduce using rule 9 (comando -> if_statement .)
    BREAK           reduce using rule 9 (comando -> if_statement .)
    CONTINUE        reduce using rule 9 (comando -> if_statement .)
    RETURN          reduce using rule 9 (comando -> if_statement .)
    INT             reduce using rule 9 (comando -> if_statement .)
    FLOAT           reduce using rule 9 (comando -> if_statement .)
    CHAR            reduce using rule 9 (comando -> if_statement .)
    VOID            reduce using rule 9 (comando -> if_statement .)
    BOOL            reduce using rule 9 (comando -> if_statement .)
    RBRACE          reduce using rule 9 (comando -> if_statement .)


state 14

    (10) comando -> while_statement .

    NOME            reduce using rule 10 (comando -> while_statement .)
    IF              reduce using rule 10 (comando -> while_statement .)
    WHILE           reduce using rule 10 (comando -> while_statement .)
    FOR             reduce using rule 10 (comando -> while_statement .)
    BREAK           reduce using rule 10 (comando -> while_statement .)
    CONTINUE        reduce using rule 10 (comando -> while_statement .)
    RETURN          reduce using rule 10 (comando -> while_statement .)
    INT             reduce using rule 10 (comando -> while_statement .)
    FLOAT           reduce using rule 10 (comando -> while_statement .)
    CHAR            reduce using rule 10 (comando -> while_statement .)
    VOID            reduce using rule 10 (comando -> while_statement .)
    BOOL            reduce using rule 10 (comando -> while_statement .)
    RBRACE          reduce using rule 10 (comando -> while_statement .)


state 15

    (11) comando -> for_statement .

    NOME            reduce using rule 11 (comando -> for_statement .)
    IF              reduce using rule 11 (comando -> for_statement .)
    WHILE           reduce using rule 11 (comando -> for_statement .)
    FOR             reduce using rule 11 (comando -> for_statement .)
    BREAK           reduce using rule 11 (comando -> for_statement .)
    CONTINUE        reduce using rule 11 (comando -> for_statement .)
    RETURN          reduce using rule 11 (comando -> for_statement .)
    INT             reduce using rule 11 (comando -> for_statement .)
    FLOAT           reduce using rule 11 (comando -> for_statement .)
    CHAR            reduce using rule 11 (comando -> for_statement .)
    VOID            reduce using rule 11 (comando -> for_statement .)
    BOOL            reduce using rule 11 (comando -> for_statement .)
    RBRACE          reduce using rule 11 (comando -> for_statement .)


state 16

    (12) comando -> break_statement .

    NOME            reduce using rule 12 (comando -> break_statement .)
    IF              reduce using rule 12 (comando -> break_statement .)
    WHILE           reduce using rule 12 (comando -> break_statement .)
    FOR             reduce using rule 12 (comando -> break_statement .)
    BREAK           reduce using rule 12 (comando -> break_statement .)
    CONTINUE        reduce using rule 12 (comando -> break_statement .)
    RETURN          reduce using rule 12 (comando -> break_statement .)
    INT             reduce using rule 12 (comando -> break_statement .)
    FLOAT           reduce using rule 12 (comando -> break_statement .)
    CHAR            reduce using rule 12 (comando -> break_statement .)
    VOID            reduce using rule 12 (comando -> break_statement .)
    BOOL            reduce using rule 12 (comando -> break_statement .)
    RBRACE          reduce using rule 12 (comando -> break_statement .)


state 17

    (13) comando -> continue_statement .

    NOME            reduce using rule 13 (comando -> continue_statement .)
    IF              reduce using rule 13 (comando -> continue_statement .)
    WHILE           reduce using rule 13 (comando -> continue_statement .)
    FOR             reduce using rule 13 (comando -> continue_statement .)
    BREAK           reduce using rule 13 (comando -> continue_statement .)
    CONTINUE        reduce using rule 13 (comando -> continue_statement .)
    RETURN          reduce using rule 13 (comando -> continue_statement .)
    INT             reduce using rule 13 (comando -> continue_statement .)
    FLOAT           reduce using rule 13 (comando -> continue_statement .)
    CHAR            reduce using rule 13 (comando -> continue_statement .)
    VOID            reduce using rule 13 (comando -> continue_statement .)
    BOOL            reduce using rule 13 (comando -> continue_statement .)
    RBRACE          reduce using rule 13 (comando -> continue_statement .)


state 18

    (14) comando -> return_statement .

    NOME            reduce using rule 14 (comando -> return_statement .)
    IF              reduce using rule 14 (comando -> return_statement .)
    WHILE           reduce using rule 14 (comando -> return_statement .)
    FOR             reduce using rule 14 (comando -> return_statement .)
    BREAK           reduce using rule 14 (comando -> return_statement .)
    CONTINUE        reduce using rule 14 (comando -> return_statement .)
    RETURN          reduce using rule 14 (comando -> return_statement .)
    INT             reduce using rule 14 (comando -> return_statement .)
    FLOAT           reduce using rule 14 (comando -> return_statement .)
    CHAR            reduce using rule 14 (comando -> return_statement .)
    VOID            reduce using rule 14 (comando -> return_statement .)
    BOOL            reduce using rule 14 (comando -> return_statement .)
    RBRACE          reduce using rule 14 (comando -> return_statement .)


state 19

    (52) declaration -> type . declaration_list SEMICOLON
    (48) declaration_list -> . NOME
    (49) declaration_list -> . NOME declaration_list
    (50) declaration_list -> . NOME ASSIGN valor
    (51) declaration_list -> . NOME ASSIGN valor COMMA declaration_list

    NOME            shift and go to state 35

    declaration_list               shift and go to state 34

state 20

    (47) assignment -> NOME . ASSIGN valor SEMICOLON

    ASSIGN          shift and go to state 36


state 21

    (53) if_statement -> IF . LPAREN valor RPAREN LBRACE bloco RBRACE

    LPAREN          shift and go to state 37


state 22

    (54) while_statement -> WHILE . LPAREN valor RPAREN LBRACE bloco RBRACE

    LPAREN          shift and go to state 38


state 23

    (55) for_statement -> FOR . LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando

    LPAREN          shift and go to state 39


state 24

    (78) break_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 40


state 25

    (79) continue_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 41


state 26

    (80) return_statement -> RETURN . valor SEMICOLON
    (40) valor -> . NUMBER
    (41) valor -> . NOME
    (42) valor -> . CHARACTER
    (43) valor -> . boolean
    (44) valor -> . operation
    (45) valor -> . parentheses
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (46) operation -> . valor operador valor
    (19) parentheses -> . LPAREN valor RPAREN

    NUMBER          shift and go to state 43
    NOME            shift and go to state 44
    CHARACTER       shift and go to state 45
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 51

    valor                          shift and go to state 42
    boolean                        shift and go to state 46
    operation                      shift and go to state 47
    parentheses                    shift and go to state 48

state 27

    (20) type -> INT .

    NOME            reduce using rule 20 (type -> INT .)


state 28

    (21) type -> FLOAT .

    NOME            reduce using rule 21 (type -> FLOAT .)


state 29

    (22) type -> CHAR .

    NOME            reduce using rule 22 (type -> CHAR .)


state 30

    (23) type -> VOID .

    NOME            reduce using rule 23 (type -> VOID .)


state 31

    (24) type -> BOOL .

    NOME            reduce using rule 24 (type -> BOOL .)


state 32

    (17) bloco -> LBRACE comandos RBRACE .

    $end            reduce using rule 17 (bloco -> LBRACE comandos RBRACE .)
    RBRACE          reduce using rule 17 (bloco -> LBRACE comandos RBRACE .)


state 33

    (15) comandos -> comando comandos .

    RBRACE          reduce using rule 15 (comandos -> comando comandos .)


state 34

    (52) declaration -> type declaration_list . SEMICOLON

    SEMICOLON       shift and go to state 52


state 35

    (48) declaration_list -> NOME .
    (49) declaration_list -> NOME . declaration_list
    (50) declaration_list -> NOME . ASSIGN valor
    (51) declaration_list -> NOME . ASSIGN valor COMMA declaration_list
    (48) declaration_list -> . NOME
    (49) declaration_list -> . NOME declaration_list
    (50) declaration_list -> . NOME ASSIGN valor
    (51) declaration_list -> . NOME ASSIGN valor COMMA declaration_list

    SEMICOLON       reduce using rule 48 (declaration_list -> NOME .)
    ASSIGN          shift and go to state 54
    NOME            shift and go to state 35

    declaration_list               shift and go to state 53

state 36

    (47) assignment -> NOME ASSIGN . valor SEMICOLON
    (40) valor -> . NUMBER
    (41) valor -> . NOME
    (42) valor -> . CHARACTER
    (43) valor -> . boolean
    (44) valor -> . operation
    (45) valor -> . parentheses
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (46) operation -> . valor operador valor
    (19) parentheses -> . LPAREN valor RPAREN

    NUMBER          shift and go to state 43
    NOME            shift and go to state 44
    CHARACTER       shift and go to state 45
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 51

    valor                          shift and go to state 55
    boolean                        shift and go to state 46
    operation                      shift and go to state 47
    parentheses                    shift and go to state 48

state 37

    (53) if_statement -> IF LPAREN . valor RPAREN LBRACE bloco RBRACE
    (40) valor -> . NUMBER
    (41) valor -> . NOME
    (42) valor -> . CHARACTER
    (43) valor -> . boolean
    (44) valor -> . operation
    (45) valor -> . parentheses
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (46) operation -> . valor operador valor
    (19) parentheses -> . LPAREN valor RPAREN

    NUMBER          shift and go to state 43
    NOME            shift and go to state 44
    CHARACTER       shift and go to state 45
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 51

    valor                          shift and go to state 56
    boolean                        shift and go to state 46
    operation                      shift and go to state 47
    parentheses                    shift and go to state 48

state 38

    (54) while_statement -> WHILE LPAREN . valor RPAREN LBRACE bloco RBRACE
    (40) valor -> . NUMBER
    (41) valor -> . NOME
    (42) valor -> . CHARACTER
    (43) valor -> . boolean
    (44) valor -> . operation
    (45) valor -> . parentheses
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (46) operation -> . valor operador valor
    (19) parentheses -> . LPAREN valor RPAREN

    NUMBER          shift and go to state 43
    NOME            shift and go to state 44
    CHARACTER       shift and go to state 45
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 51

    valor                          shift and go to state 57
    boolean                        shift and go to state 46
    operation                      shift and go to state 47
    parentheses                    shift and go to state 48

state 39

    (55) for_statement -> FOR LPAREN . for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando
    (56) for_init -> . assignment
    (57) for_init -> . declaration
    (58) for_init -> . valor
    (59) for_init -> . empty
    (60) for_init -> . assignment for_comma
    (61) for_init -> . valor for_comma
    (62) for_init -> . declaration for_comma
    (47) assignment -> . NOME ASSIGN valor SEMICOLON
    (52) declaration -> . type declaration_list SEMICOLON
    (40) valor -> . NUMBER
    (41) valor -> . NOME
    (42) valor -> . CHARACTER
    (43) valor -> . boolean
    (44) valor -> . operation
    (45) valor -> . parentheses
    (81) empty -> .
    (20) type -> . INT
    (21) type -> . FLOAT
    (22) type -> . CHAR
    (23) type -> . VOID
    (24) type -> . BOOL
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (46) operation -> . valor operador valor
    (19) parentheses -> . LPAREN valor RPAREN

    NOME            shift and go to state 63
    NUMBER          shift and go to state 43
    CHARACTER       shift and go to state 45
    SEMICOLON       reduce using rule 81 (empty -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 29
    VOID            shift and go to state 30
    BOOL            shift and go to state 31
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 51

    for_init                       shift and go to state 58
    assignment                     shift and go to state 59
    declaration                    shift and go to state 60
    valor                          shift and go to state 61
    empty                          shift and go to state 62
    type                           shift and go to state 19
    boolean                        shift and go to state 46
    operation                      shift and go to state 47
    parentheses                    shift and go to state 48

state 40

    (78) break_statement -> BREAK SEMICOLON .

    NOME            reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    INT             reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    BOOL            reduce using rule 78 (break_statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 78 (break_statement -> BREAK SEMICOLON .)


state 41

    (79) continue_statement -> CONTINUE SEMICOLON .

    NOME            reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    BOOL            reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 79 (continue_statement -> CONTINUE SEMICOLON .)


state 42

    (80) return_statement -> RETURN valor . SEMICOLON
    (46) operation -> valor . operador valor
    (25) operador -> . MULTIPLY
    (26) operador -> . DIV
    (27) operador -> . MOD
    (28) operador -> . PLUS
    (29) operador -> . MINUS
    (30) operador -> . EQUAL
    (31) operador -> . NEQUAL
    (32) operador -> . GT
    (33) operador -> . LT
    (34) operador -> . GTE
    (35) operador -> . LTE
    (36) operador -> . AND
    (37) operador -> . OR

    SEMICOLON       shift and go to state 64
    MULTIPLY        shift and go to state 66
    DIV             shift and go to state 67
    MOD             shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    EQUAL           shift and go to state 71
    NEQUAL          shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78

    operador                       shift and go to state 65

state 43

    (40) valor -> NUMBER .

    SEMICOLON       reduce using rule 40 (valor -> NUMBER .)
    MULTIPLY        reduce using rule 40 (valor -> NUMBER .)
    DIV             reduce using rule 40 (valor -> NUMBER .)
    MOD             reduce using rule 40 (valor -> NUMBER .)
    PLUS            reduce using rule 40 (valor -> NUMBER .)
    MINUS           reduce using rule 40 (valor -> NUMBER .)
    EQUAL           reduce using rule 40 (valor -> NUMBER .)
    NEQUAL          reduce using rule 40 (valor -> NUMBER .)
    GT              reduce using rule 40 (valor -> NUMBER .)
    LT              reduce using rule 40 (valor -> NUMBER .)
    GTE             reduce using rule 40 (valor -> NUMBER .)
    LTE             reduce using rule 40 (valor -> NUMBER .)
    AND             reduce using rule 40 (valor -> NUMBER .)
    OR              reduce using rule 40 (valor -> NUMBER .)
    RPAREN          reduce using rule 40 (valor -> NUMBER .)
    COMMA           reduce using rule 40 (valor -> NUMBER .)


state 44

    (41) valor -> NOME .

    SEMICOLON       reduce using rule 41 (valor -> NOME .)
    MULTIPLY        reduce using rule 41 (valor -> NOME .)
    DIV             reduce using rule 41 (valor -> NOME .)
    MOD             reduce using rule 41 (valor -> NOME .)
    PLUS            reduce using rule 41 (valor -> NOME .)
    MINUS           reduce using rule 41 (valor -> NOME .)
    EQUAL           reduce using rule 41 (valor -> NOME .)
    NEQUAL          reduce using rule 41 (valor -> NOME .)
    GT              reduce using rule 41 (valor -> NOME .)
    LT              reduce using rule 41 (valor -> NOME .)
    GTE             reduce using rule 41 (valor -> NOME .)
    LTE             reduce using rule 41 (valor -> NOME .)
    AND             reduce using rule 41 (valor -> NOME .)
    OR              reduce using rule 41 (valor -> NOME .)
    RPAREN          reduce using rule 41 (valor -> NOME .)
    COMMA           reduce using rule 41 (valor -> NOME .)


state 45

    (42) valor -> CHARACTER .

    SEMICOLON       reduce using rule 42 (valor -> CHARACTER .)
    MULTIPLY        reduce using rule 42 (valor -> CHARACTER .)
    DIV             reduce using rule 42 (valor -> CHARACTER .)
    MOD             reduce using rule 42 (valor -> CHARACTER .)
    PLUS            reduce using rule 42 (valor -> CHARACTER .)
    MINUS           reduce using rule 42 (valor -> CHARACTER .)
    EQUAL           reduce using rule 42 (valor -> CHARACTER .)
    NEQUAL          reduce using rule 42 (valor -> CHARACTER .)
    GT              reduce using rule 42 (valor -> CHARACTER .)
    LT              reduce using rule 42 (valor -> CHARACTER .)
    GTE             reduce using rule 42 (valor -> CHARACTER .)
    LTE             reduce using rule 42 (valor -> CHARACTER .)
    AND             reduce using rule 42 (valor -> CHARACTER .)
    OR              reduce using rule 42 (valor -> CHARACTER .)
    RPAREN          reduce using rule 42 (valor -> CHARACTER .)
    COMMA           reduce using rule 42 (valor -> CHARACTER .)


state 46

    (43) valor -> boolean .

    SEMICOLON       reduce using rule 43 (valor -> boolean .)
    MULTIPLY        reduce using rule 43 (valor -> boolean .)
    DIV             reduce using rule 43 (valor -> boolean .)
    MOD             reduce using rule 43 (valor -> boolean .)
    PLUS            reduce using rule 43 (valor -> boolean .)
    MINUS           reduce using rule 43 (valor -> boolean .)
    EQUAL           reduce using rule 43 (valor -> boolean .)
    NEQUAL          reduce using rule 43 (valor -> boolean .)
    GT              reduce using rule 43 (valor -> boolean .)
    LT              reduce using rule 43 (valor -> boolean .)
    GTE             reduce using rule 43 (valor -> boolean .)
    LTE             reduce using rule 43 (valor -> boolean .)
    AND             reduce using rule 43 (valor -> boolean .)
    OR              reduce using rule 43 (valor -> boolean .)
    RPAREN          reduce using rule 43 (valor -> boolean .)
    COMMA           reduce using rule 43 (valor -> boolean .)


state 47

    (44) valor -> operation .

    SEMICOLON       reduce using rule 44 (valor -> operation .)
    MULTIPLY        reduce using rule 44 (valor -> operation .)
    DIV             reduce using rule 44 (valor -> operation .)
    MOD             reduce using rule 44 (valor -> operation .)
    PLUS            reduce using rule 44 (valor -> operation .)
    MINUS           reduce using rule 44 (valor -> operation .)
    EQUAL           reduce using rule 44 (valor -> operation .)
    NEQUAL          reduce using rule 44 (valor -> operation .)
    GT              reduce using rule 44 (valor -> operation .)
    LT              reduce using rule 44 (valor -> operation .)
    GTE             reduce using rule 44 (valor -> operation .)
    LTE             reduce using rule 44 (valor -> operation .)
    AND             reduce using rule 44 (valor -> operation .)
    OR              reduce using rule 44 (valor -> operation .)
    RPAREN          reduce using rule 44 (valor -> operation .)
    COMMA           reduce using rule 44 (valor -> operation .)


state 48

    (45) valor -> parentheses .

    SEMICOLON       reduce using rule 45 (valor -> parentheses .)
    MULTIPLY        reduce using rule 45 (valor -> parentheses .)
    DIV             reduce using rule 45 (valor -> parentheses .)
    MOD             reduce using rule 45 (valor -> parentheses .)
    PLUS            reduce using rule 45 (valor -> parentheses .)
    MINUS           reduce using rule 45 (valor -> parentheses .)
    EQUAL           reduce using rule 45 (valor -> parentheses .)
    NEQUAL          reduce using rule 45 (valor -> parentheses .)
    GT              reduce using rule 45 (valor -> parentheses .)
    LT              reduce using rule 45 (valor -> parentheses .)
    GTE             reduce using rule 45 (valor -> parentheses .)
    LTE             reduce using rule 45 (valor -> parentheses .)
    AND             reduce using rule 45 (valor -> parentheses .)
    OR              reduce using rule 45 (valor -> parentheses .)
    RPAREN          reduce using rule 45 (valor -> parentheses .)
    COMMA           reduce using rule 45 (valor -> parentheses .)


state 49

    (38) boolean -> TRUE .

    SEMICOLON       reduce using rule 38 (boolean -> TRUE .)
    MULTIPLY        reduce using rule 38 (boolean -> TRUE .)
    DIV             reduce using rule 38 (boolean -> TRUE .)
    MOD             reduce using rule 38 (boolean -> TRUE .)
    PLUS            reduce using rule 38 (boolean -> TRUE .)
    MINUS           reduce using rule 38 (boolean -> TRUE .)
    EQUAL           reduce using rule 38 (boolean -> TRUE .)
    NEQUAL          reduce using rule 38 (boolean -> TRUE .)
    GT              reduce using rule 38 (boolean -> TRUE .)
    LT              reduce using rule 38 (boolean -> TRUE .)
    GTE             reduce using rule 38 (boolean -> TRUE .)
    LTE             reduce using rule 38 (boolean -> TRUE .)
    AND             reduce using rule 38 (boolean -> TRUE .)
    OR              reduce using rule 38 (boolean -> TRUE .)
    RPAREN          reduce using rule 38 (boolean -> TRUE .)
    COMMA           reduce using rule 38 (boolean -> TRUE .)


state 50

    (39) boolean -> FALSE .

    SEMICOLON       reduce using rule 39 (boolean -> FALSE .)
    MULTIPLY        reduce using rule 39 (boolean -> FALSE .)
    DIV             reduce using rule 39 (boolean -> FALSE .)
    MOD             reduce using rule 39 (boolean -> FALSE .)
    PLUS            reduce using rule 39 (boolean -> FALSE .)
    MINUS           reduce using rule 39 (boolean -> FALSE .)
    EQUAL           reduce using rule 39 (boolean -> FALSE .)
    NEQUAL          reduce using rule 39 (boolean -> FALSE .)
    GT              reduce using rule 39 (boolean -> FALSE .)
    LT              reduce using rule 39 (boolean -> FALSE .)
    GTE             reduce using rule 39 (boolean -> FALSE .)
    LTE             reduce using rule 39 (boolean -> FALSE .)
    AND             reduce using rule 39 (boolean -> FALSE .)
    OR              reduce using rule 39 (boolean -> FALSE .)
    RPAREN          reduce using rule 39 (boolean -> FALSE .)
    COMMA           reduce using rule 39 (boolean -> FALSE .)


state 51

    (19) parentheses -> LPAREN . valor RPAREN
    (40) valor -> . NUMBER
    (41) valor -> . NOME
    (42) valor -> . CHARACTER
    (43) valor -> . boolean
    (44) valor -> . operation
    (45) valor -> . parentheses
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (46) operation -> . valor operador valor
    (19) parentheses -> . LPAREN valor RPAREN

    NUMBER          shift and go to state 43
    NOME            shift and go to state 44
    CHARACTER       shift and go to state 45
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 51

    valor                          shift and go to state 79
    boolean                        shift and go to state 46
    operation                      shift and go to state 47
    parentheses                    shift and go to state 48

state 52

    (52) declaration -> type declaration_list SEMICOLON .

    NOME            reduce using rule 52 (declaration -> type declaration_list SEMICOLON .)
    IF              reduce using rule 52 (declaration -> type declaration_list SEMICOLON .)
    WHILE           reduce using rule 52 (declaration -> type declaration_list SEMICOLON .)
    FOR             reduce using rule 52 (declaration -> type declaration_list SEMICOLON .)
    BREAK           reduce using rule 52 (declaration -> type declaration_list SEMICOLON .)
    CONTINUE        reduce using rule 52 (declaration -> type declaration_list SEMICOLON .)
    RETURN          reduce using rule 52 (declaration -> type declaration_list SEMICOLON .)
    INT             reduce using rule 52 (declaration -> type declaration_list SEMICOLON .)
    FLOAT           reduce using rule 52 (declaration -> type declaration_list SEMICOLON .)
    CHAR            reduce using rule 52 (declaration -> type declaration_list SEMICOLON .)
    VOID            reduce using rule 52 (declaration -> type declaration_list SEMICOLON .)
    BOOL            reduce using rule 52 (declaration -> type declaration_list SEMICOLON .)
    RBRACE          reduce using rule 52 (declaration -> type declaration_list SEMICOLON .)
    COMMA           reduce using rule 52 (declaration -> type declaration_list SEMICOLON .)
    SEMICOLON       reduce using rule 52 (declaration -> type declaration_list SEMICOLON .)


state 53

    (49) declaration_list -> NOME declaration_list .

    SEMICOLON       reduce using rule 49 (declaration_list -> NOME declaration_list .)


state 54

    (50) declaration_list -> NOME ASSIGN . valor
    (51) declaration_list -> NOME ASSIGN . valor COMMA declaration_list
    (40) valor -> . NUMBER
    (41) valor -> . NOME
    (42) valor -> . CHARACTER
    (43) valor -> . boolean
    (44) valor -> . operation
    (45) valor -> . parentheses
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (46) operation -> . valor operador valor
    (19) parentheses -> . LPAREN valor RPAREN

    NUMBER          shift and go to state 43
    NOME            shift and go to state 44
    CHARACTER       shift and go to state 45
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 51

    valor                          shift and go to state 80
    boolean                        shift and go to state 46
    operation                      shift and go to state 47
    parentheses                    shift and go to state 48

state 55

    (47) assignment -> NOME ASSIGN valor . SEMICOLON
    (46) operation -> valor . operador valor
    (25) operador -> . MULTIPLY
    (26) operador -> . DIV
    (27) operador -> . MOD
    (28) operador -> . PLUS
    (29) operador -> . MINUS
    (30) operador -> . EQUAL
    (31) operador -> . NEQUAL
    (32) operador -> . GT
    (33) operador -> . LT
    (34) operador -> . GTE
    (35) operador -> . LTE
    (36) operador -> . AND
    (37) operador -> . OR

    SEMICOLON       shift and go to state 81
    MULTIPLY        shift and go to state 66
    DIV             shift and go to state 67
    MOD             shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    EQUAL           shift and go to state 71
    NEQUAL          shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78

    operador                       shift and go to state 65

state 56

    (53) if_statement -> IF LPAREN valor . RPAREN LBRACE bloco RBRACE
    (46) operation -> valor . operador valor
    (25) operador -> . MULTIPLY
    (26) operador -> . DIV
    (27) operador -> . MOD
    (28) operador -> . PLUS
    (29) operador -> . MINUS
    (30) operador -> . EQUAL
    (31) operador -> . NEQUAL
    (32) operador -> . GT
    (33) operador -> . LT
    (34) operador -> . GTE
    (35) operador -> . LTE
    (36) operador -> . AND
    (37) operador -> . OR

    RPAREN          shift and go to state 82
    MULTIPLY        shift and go to state 66
    DIV             shift and go to state 67
    MOD             shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    EQUAL           shift and go to state 71
    NEQUAL          shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78

    operador                       shift and go to state 65

state 57

    (54) while_statement -> WHILE LPAREN valor . RPAREN LBRACE bloco RBRACE
    (46) operation -> valor . operador valor
    (25) operador -> . MULTIPLY
    (26) operador -> . DIV
    (27) operador -> . MOD
    (28) operador -> . PLUS
    (29) operador -> . MINUS
    (30) operador -> . EQUAL
    (31) operador -> . NEQUAL
    (32) operador -> . GT
    (33) operador -> . LT
    (34) operador -> . GTE
    (35) operador -> . LTE
    (36) operador -> . AND
    (37) operador -> . OR

    RPAREN          shift and go to state 83
    MULTIPLY        shift and go to state 66
    DIV             shift and go to state 67
    MOD             shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    EQUAL           shift and go to state 71
    NEQUAL          shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78

    operador                       shift and go to state 65

state 58

    (55) for_statement -> FOR LPAREN for_init . SEMICOLON for_condition SEMICOLON for_update RPAREN comando

    SEMICOLON       shift and go to state 84


state 59

    (56) for_init -> assignment .
    (60) for_init -> assignment . for_comma
    (63) for_comma -> . COMMA assignment
    (64) for_comma -> . COMMA valor
    (65) for_comma -> . COMMA assignment for_comma

    SEMICOLON       reduce using rule 56 (for_init -> assignment .)
    COMMA           shift and go to state 86

    for_comma                      shift and go to state 85

state 60

    (57) for_init -> declaration .
    (62) for_init -> declaration . for_comma
    (63) for_comma -> . COMMA assignment
    (64) for_comma -> . COMMA valor
    (65) for_comma -> . COMMA assignment for_comma

    SEMICOLON       reduce using rule 57 (for_init -> declaration .)
    COMMA           shift and go to state 86

    for_comma                      shift and go to state 87

state 61

    (58) for_init -> valor .
    (61) for_init -> valor . for_comma
    (46) operation -> valor . operador valor
    (63) for_comma -> . COMMA assignment
    (64) for_comma -> . COMMA valor
    (65) for_comma -> . COMMA assignment for_comma
    (25) operador -> . MULTIPLY
    (26) operador -> . DIV
    (27) operador -> . MOD
    (28) operador -> . PLUS
    (29) operador -> . MINUS
    (30) operador -> . EQUAL
    (31) operador -> . NEQUAL
    (32) operador -> . GT
    (33) operador -> . LT
    (34) operador -> . GTE
    (35) operador -> . LTE
    (36) operador -> . AND
    (37) operador -> . OR

    SEMICOLON       reduce using rule 58 (for_init -> valor .)
    COMMA           shift and go to state 86
    MULTIPLY        shift and go to state 66
    DIV             shift and go to state 67
    MOD             shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    EQUAL           shift and go to state 71
    NEQUAL          shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78

    for_comma                      shift and go to state 88
    operador                       shift and go to state 65

state 62

    (59) for_init -> empty .

    SEMICOLON       reduce using rule 59 (for_init -> empty .)


state 63

    (47) assignment -> NOME . ASSIGN valor SEMICOLON
    (41) valor -> NOME .

    ASSIGN          shift and go to state 36
    COMMA           reduce using rule 41 (valor -> NOME .)
    MULTIPLY        reduce using rule 41 (valor -> NOME .)
    DIV             reduce using rule 41 (valor -> NOME .)
    MOD             reduce using rule 41 (valor -> NOME .)
    PLUS            reduce using rule 41 (valor -> NOME .)
    MINUS           reduce using rule 41 (valor -> NOME .)
    EQUAL           reduce using rule 41 (valor -> NOME .)
    NEQUAL          reduce using rule 41 (valor -> NOME .)
    GT              reduce using rule 41 (valor -> NOME .)
    LT              reduce using rule 41 (valor -> NOME .)
    GTE             reduce using rule 41 (valor -> NOME .)
    LTE             reduce using rule 41 (valor -> NOME .)
    AND             reduce using rule 41 (valor -> NOME .)
    OR              reduce using rule 41 (valor -> NOME .)
    SEMICOLON       reduce using rule 41 (valor -> NOME .)
    RPAREN          reduce using rule 41 (valor -> NOME .)


state 64

    (80) return_statement -> RETURN valor SEMICOLON .

    NOME            reduce using rule 80 (return_statement -> RETURN valor SEMICOLON .)
    IF              reduce using rule 80 (return_statement -> RETURN valor SEMICOLON .)
    WHILE           reduce using rule 80 (return_statement -> RETURN valor SEMICOLON .)
    FOR             reduce using rule 80 (return_statement -> RETURN valor SEMICOLON .)
    BREAK           reduce using rule 80 (return_statement -> RETURN valor SEMICOLON .)
    CONTINUE        reduce using rule 80 (return_statement -> RETURN valor SEMICOLON .)
    RETURN          reduce using rule 80 (return_statement -> RETURN valor SEMICOLON .)
    INT             reduce using rule 80 (return_statement -> RETURN valor SEMICOLON .)
    FLOAT           reduce using rule 80 (return_statement -> RETURN valor SEMICOLON .)
    CHAR            reduce using rule 80 (return_statement -> RETURN valor SEMICOLON .)
    VOID            reduce using rule 80 (return_statement -> RETURN valor SEMICOLON .)
    BOOL            reduce using rule 80 (return_statement -> RETURN valor SEMICOLON .)
    RBRACE          reduce using rule 80 (return_statement -> RETURN valor SEMICOLON .)


state 65

    (46) operation -> valor operador . valor
    (40) valor -> . NUMBER
    (41) valor -> . NOME
    (42) valor -> . CHARACTER
    (43) valor -> . boolean
    (44) valor -> . operation
    (45) valor -> . parentheses
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (46) operation -> . valor operador valor
    (19) parentheses -> . LPAREN valor RPAREN

    NUMBER          shift and go to state 43
    NOME            shift and go to state 44
    CHARACTER       shift and go to state 45
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 51

    valor                          shift and go to state 89
    boolean                        shift and go to state 46
    operation                      shift and go to state 47
    parentheses                    shift and go to state 48

state 66

    (25) operador -> MULTIPLY .

    NUMBER          reduce using rule 25 (operador -> MULTIPLY .)
    NOME            reduce using rule 25 (operador -> MULTIPLY .)
    CHARACTER       reduce using rule 25 (operador -> MULTIPLY .)
    TRUE            reduce using rule 25 (operador -> MULTIPLY .)
    FALSE           reduce using rule 25 (operador -> MULTIPLY .)
    LPAREN          reduce using rule 25 (operador -> MULTIPLY .)


state 67

    (26) operador -> DIV .

    NUMBER          reduce using rule 26 (operador -> DIV .)
    NOME            reduce using rule 26 (operador -> DIV .)
    CHARACTER       reduce using rule 26 (operador -> DIV .)
    TRUE            reduce using rule 26 (operador -> DIV .)
    FALSE           reduce using rule 26 (operador -> DIV .)
    LPAREN          reduce using rule 26 (operador -> DIV .)


state 68

    (27) operador -> MOD .

    NUMBER          reduce using rule 27 (operador -> MOD .)
    NOME            reduce using rule 27 (operador -> MOD .)
    CHARACTER       reduce using rule 27 (operador -> MOD .)
    TRUE            reduce using rule 27 (operador -> MOD .)
    FALSE           reduce using rule 27 (operador -> MOD .)
    LPAREN          reduce using rule 27 (operador -> MOD .)


state 69

    (28) operador -> PLUS .

    NUMBER          reduce using rule 28 (operador -> PLUS .)
    NOME            reduce using rule 28 (operador -> PLUS .)
    CHARACTER       reduce using rule 28 (operador -> PLUS .)
    TRUE            reduce using rule 28 (operador -> PLUS .)
    FALSE           reduce using rule 28 (operador -> PLUS .)
    LPAREN          reduce using rule 28 (operador -> PLUS .)


state 70

    (29) operador -> MINUS .

    NUMBER          reduce using rule 29 (operador -> MINUS .)
    NOME            reduce using rule 29 (operador -> MINUS .)
    CHARACTER       reduce using rule 29 (operador -> MINUS .)
    TRUE            reduce using rule 29 (operador -> MINUS .)
    FALSE           reduce using rule 29 (operador -> MINUS .)
    LPAREN          reduce using rule 29 (operador -> MINUS .)


state 71

    (30) operador -> EQUAL .

    NUMBER          reduce using rule 30 (operador -> EQUAL .)
    NOME            reduce using rule 30 (operador -> EQUAL .)
    CHARACTER       reduce using rule 30 (operador -> EQUAL .)
    TRUE            reduce using rule 30 (operador -> EQUAL .)
    FALSE           reduce using rule 30 (operador -> EQUAL .)
    LPAREN          reduce using rule 30 (operador -> EQUAL .)


state 72

    (31) operador -> NEQUAL .

    NUMBER          reduce using rule 31 (operador -> NEQUAL .)
    NOME            reduce using rule 31 (operador -> NEQUAL .)
    CHARACTER       reduce using rule 31 (operador -> NEQUAL .)
    TRUE            reduce using rule 31 (operador -> NEQUAL .)
    FALSE           reduce using rule 31 (operador -> NEQUAL .)
    LPAREN          reduce using rule 31 (operador -> NEQUAL .)


state 73

    (32) operador -> GT .

    NUMBER          reduce using rule 32 (operador -> GT .)
    NOME            reduce using rule 32 (operador -> GT .)
    CHARACTER       reduce using rule 32 (operador -> GT .)
    TRUE            reduce using rule 32 (operador -> GT .)
    FALSE           reduce using rule 32 (operador -> GT .)
    LPAREN          reduce using rule 32 (operador -> GT .)


state 74

    (33) operador -> LT .

    NUMBER          reduce using rule 33 (operador -> LT .)
    NOME            reduce using rule 33 (operador -> LT .)
    CHARACTER       reduce using rule 33 (operador -> LT .)
    TRUE            reduce using rule 33 (operador -> LT .)
    FALSE           reduce using rule 33 (operador -> LT .)
    LPAREN          reduce using rule 33 (operador -> LT .)


state 75

    (34) operador -> GTE .

    NUMBER          reduce using rule 34 (operador -> GTE .)
    NOME            reduce using rule 34 (operador -> GTE .)
    CHARACTER       reduce using rule 34 (operador -> GTE .)
    TRUE            reduce using rule 34 (operador -> GTE .)
    FALSE           reduce using rule 34 (operador -> GTE .)
    LPAREN          reduce using rule 34 (operador -> GTE .)


state 76

    (35) operador -> LTE .

    NUMBER          reduce using rule 35 (operador -> LTE .)
    NOME            reduce using rule 35 (operador -> LTE .)
    CHARACTER       reduce using rule 35 (operador -> LTE .)
    TRUE            reduce using rule 35 (operador -> LTE .)
    FALSE           reduce using rule 35 (operador -> LTE .)
    LPAREN          reduce using rule 35 (operador -> LTE .)


state 77

    (36) operador -> AND .

    NUMBER          reduce using rule 36 (operador -> AND .)
    NOME            reduce using rule 36 (operador -> AND .)
    CHARACTER       reduce using rule 36 (operador -> AND .)
    TRUE            reduce using rule 36 (operador -> AND .)
    FALSE           reduce using rule 36 (operador -> AND .)
    LPAREN          reduce using rule 36 (operador -> AND .)


state 78

    (37) operador -> OR .

    NUMBER          reduce using rule 37 (operador -> OR .)
    NOME            reduce using rule 37 (operador -> OR .)
    CHARACTER       reduce using rule 37 (operador -> OR .)
    TRUE            reduce using rule 37 (operador -> OR .)
    FALSE           reduce using rule 37 (operador -> OR .)
    LPAREN          reduce using rule 37 (operador -> OR .)


state 79

    (19) parentheses -> LPAREN valor . RPAREN
    (46) operation -> valor . operador valor
    (25) operador -> . MULTIPLY
    (26) operador -> . DIV
    (27) operador -> . MOD
    (28) operador -> . PLUS
    (29) operador -> . MINUS
    (30) operador -> . EQUAL
    (31) operador -> . NEQUAL
    (32) operador -> . GT
    (33) operador -> . LT
    (34) operador -> . GTE
    (35) operador -> . LTE
    (36) operador -> . AND
    (37) operador -> . OR

    RPAREN          shift and go to state 90
    MULTIPLY        shift and go to state 66
    DIV             shift and go to state 67
    MOD             shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    EQUAL           shift and go to state 71
    NEQUAL          shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78

    operador                       shift and go to state 65

state 80

    (50) declaration_list -> NOME ASSIGN valor .
    (51) declaration_list -> NOME ASSIGN valor . COMMA declaration_list
    (46) operation -> valor . operador valor
    (25) operador -> . MULTIPLY
    (26) operador -> . DIV
    (27) operador -> . MOD
    (28) operador -> . PLUS
    (29) operador -> . MINUS
    (30) operador -> . EQUAL
    (31) operador -> . NEQUAL
    (32) operador -> . GT
    (33) operador -> . LT
    (34) operador -> . GTE
    (35) operador -> . LTE
    (36) operador -> . AND
    (37) operador -> . OR

    SEMICOLON       reduce using rule 50 (declaration_list -> NOME ASSIGN valor .)
    COMMA           shift and go to state 91
    MULTIPLY        shift and go to state 66
    DIV             shift and go to state 67
    MOD             shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    EQUAL           shift and go to state 71
    NEQUAL          shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78

    operador                       shift and go to state 65

state 81

    (47) assignment -> NOME ASSIGN valor SEMICOLON .

    NOME            reduce using rule 47 (assignment -> NOME ASSIGN valor SEMICOLON .)
    IF              reduce using rule 47 (assignment -> NOME ASSIGN valor SEMICOLON .)
    WHILE           reduce using rule 47 (assignment -> NOME ASSIGN valor SEMICOLON .)
    FOR             reduce using rule 47 (assignment -> NOME ASSIGN valor SEMICOLON .)
    BREAK           reduce using rule 47 (assignment -> NOME ASSIGN valor SEMICOLON .)
    CONTINUE        reduce using rule 47 (assignment -> NOME ASSIGN valor SEMICOLON .)
    RETURN          reduce using rule 47 (assignment -> NOME ASSIGN valor SEMICOLON .)
    INT             reduce using rule 47 (assignment -> NOME ASSIGN valor SEMICOLON .)
    FLOAT           reduce using rule 47 (assignment -> NOME ASSIGN valor SEMICOLON .)
    CHAR            reduce using rule 47 (assignment -> NOME ASSIGN valor SEMICOLON .)
    VOID            reduce using rule 47 (assignment -> NOME ASSIGN valor SEMICOLON .)
    BOOL            reduce using rule 47 (assignment -> NOME ASSIGN valor SEMICOLON .)
    RBRACE          reduce using rule 47 (assignment -> NOME ASSIGN valor SEMICOLON .)
    COMMA           reduce using rule 47 (assignment -> NOME ASSIGN valor SEMICOLON .)
    SEMICOLON       reduce using rule 47 (assignment -> NOME ASSIGN valor SEMICOLON .)
    RPAREN          reduce using rule 47 (assignment -> NOME ASSIGN valor SEMICOLON .)


state 82

    (53) if_statement -> IF LPAREN valor RPAREN . LBRACE bloco RBRACE

    LBRACE          shift and go to state 92


state 83

    (54) while_statement -> WHILE LPAREN valor RPAREN . LBRACE bloco RBRACE

    LBRACE          shift and go to state 93


state 84

    (55) for_statement -> FOR LPAREN for_init SEMICOLON . for_condition SEMICOLON for_update RPAREN comando
    (66) for_condition -> . assignment
    (67) for_condition -> . valor
    (68) for_condition -> . valor for_comma
    (69) for_condition -> . assignment for_comma
    (70) for_condition -> . empty
    (47) assignment -> . NOME ASSIGN valor SEMICOLON
    (40) valor -> . NUMBER
    (41) valor -> . NOME
    (42) valor -> . CHARACTER
    (43) valor -> . boolean
    (44) valor -> . operation
    (45) valor -> . parentheses
    (81) empty -> .
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (46) operation -> . valor operador valor
    (19) parentheses -> . LPAREN valor RPAREN

    NOME            shift and go to state 63
    NUMBER          shift and go to state 43
    CHARACTER       shift and go to state 45
    SEMICOLON       reduce using rule 81 (empty -> .)
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 51

    for_condition                  shift and go to state 94
    assignment                     shift and go to state 95
    valor                          shift and go to state 96
    empty                          shift and go to state 97
    boolean                        shift and go to state 46
    operation                      shift and go to state 47
    parentheses                    shift and go to state 48

state 85

    (60) for_init -> assignment for_comma .

    SEMICOLON       reduce using rule 60 (for_init -> assignment for_comma .)


state 86

    (63) for_comma -> COMMA . assignment
    (64) for_comma -> COMMA . valor
    (65) for_comma -> COMMA . assignment for_comma
    (47) assignment -> . NOME ASSIGN valor SEMICOLON
    (40) valor -> . NUMBER
    (41) valor -> . NOME
    (42) valor -> . CHARACTER
    (43) valor -> . boolean
    (44) valor -> . operation
    (45) valor -> . parentheses
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (46) operation -> . valor operador valor
    (19) parentheses -> . LPAREN valor RPAREN

    NOME            shift and go to state 63
    NUMBER          shift and go to state 43
    CHARACTER       shift and go to state 45
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 51

    assignment                     shift and go to state 98
    valor                          shift and go to state 99
    boolean                        shift and go to state 46
    operation                      shift and go to state 47
    parentheses                    shift and go to state 48

state 87

    (62) for_init -> declaration for_comma .

    SEMICOLON       reduce using rule 62 (for_init -> declaration for_comma .)


state 88

    (61) for_init -> valor for_comma .

    SEMICOLON       reduce using rule 61 (for_init -> valor for_comma .)


state 89

    (46) operation -> valor operador valor .
    (46) operation -> valor . operador valor
    (25) operador -> . MULTIPLY
    (26) operador -> . DIV
    (27) operador -> . MOD
    (28) operador -> . PLUS
    (29) operador -> . MINUS
    (30) operador -> . EQUAL
    (31) operador -> . NEQUAL
    (32) operador -> . GT
    (33) operador -> . LT
    (34) operador -> . GTE
    (35) operador -> . LTE
    (36) operador -> . AND
    (37) operador -> . OR

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 46 (operation -> valor operador valor .)
    RPAREN          reduce using rule 46 (operation -> valor operador valor .)
    COMMA           reduce using rule 46 (operation -> valor operador valor .)
    MULTIPLY        shift and go to state 66
    DIV             shift and go to state 67
    MOD             shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    EQUAL           shift and go to state 71
    NEQUAL          shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78

  ! MULTIPLY        [ reduce using rule 46 (operation -> valor operador valor .) ]
  ! DIV             [ reduce using rule 46 (operation -> valor operador valor .) ]
  ! MOD             [ reduce using rule 46 (operation -> valor operador valor .) ]
  ! PLUS            [ reduce using rule 46 (operation -> valor operador valor .) ]
  ! MINUS           [ reduce using rule 46 (operation -> valor operador valor .) ]
  ! EQUAL           [ reduce using rule 46 (operation -> valor operador valor .) ]
  ! NEQUAL          [ reduce using rule 46 (operation -> valor operador valor .) ]
  ! GT              [ reduce using rule 46 (operation -> valor operador valor .) ]
  ! LT              [ reduce using rule 46 (operation -> valor operador valor .) ]
  ! GTE             [ reduce using rule 46 (operation -> valor operador valor .) ]
  ! LTE             [ reduce using rule 46 (operation -> valor operador valor .) ]
  ! AND             [ reduce using rule 46 (operation -> valor operador valor .) ]
  ! OR              [ reduce using rule 46 (operation -> valor operador valor .) ]

    operador                       shift and go to state 65

state 90

    (19) parentheses -> LPAREN valor RPAREN .

    SEMICOLON       reduce using rule 19 (parentheses -> LPAREN valor RPAREN .)
    MULTIPLY        reduce using rule 19 (parentheses -> LPAREN valor RPAREN .)
    DIV             reduce using rule 19 (parentheses -> LPAREN valor RPAREN .)
    MOD             reduce using rule 19 (parentheses -> LPAREN valor RPAREN .)
    PLUS            reduce using rule 19 (parentheses -> LPAREN valor RPAREN .)
    MINUS           reduce using rule 19 (parentheses -> LPAREN valor RPAREN .)
    EQUAL           reduce using rule 19 (parentheses -> LPAREN valor RPAREN .)
    NEQUAL          reduce using rule 19 (parentheses -> LPAREN valor RPAREN .)
    GT              reduce using rule 19 (parentheses -> LPAREN valor RPAREN .)
    LT              reduce using rule 19 (parentheses -> LPAREN valor RPAREN .)
    GTE             reduce using rule 19 (parentheses -> LPAREN valor RPAREN .)
    LTE             reduce using rule 19 (parentheses -> LPAREN valor RPAREN .)
    AND             reduce using rule 19 (parentheses -> LPAREN valor RPAREN .)
    OR              reduce using rule 19 (parentheses -> LPAREN valor RPAREN .)
    RPAREN          reduce using rule 19 (parentheses -> LPAREN valor RPAREN .)
    COMMA           reduce using rule 19 (parentheses -> LPAREN valor RPAREN .)


state 91

    (51) declaration_list -> NOME ASSIGN valor COMMA . declaration_list
    (48) declaration_list -> . NOME
    (49) declaration_list -> . NOME declaration_list
    (50) declaration_list -> . NOME ASSIGN valor
    (51) declaration_list -> . NOME ASSIGN valor COMMA declaration_list

    NOME            shift and go to state 35

    declaration_list               shift and go to state 100

state 92

    (53) if_statement -> IF LPAREN valor RPAREN LBRACE . bloco RBRACE
    (17) bloco -> . LBRACE comandos RBRACE
    (18) bloco -> . LBRACE RBRACE

    LBRACE          shift and go to state 7

    bloco                          shift and go to state 101

state 93

    (54) while_statement -> WHILE LPAREN valor RPAREN LBRACE . bloco RBRACE
    (17) bloco -> . LBRACE comandos RBRACE
    (18) bloco -> . LBRACE RBRACE

    LBRACE          shift and go to state 7

    bloco                          shift and go to state 102

state 94

    (55) for_statement -> FOR LPAREN for_init SEMICOLON for_condition . SEMICOLON for_update RPAREN comando

    SEMICOLON       shift and go to state 103


state 95

    (66) for_condition -> assignment .
    (69) for_condition -> assignment . for_comma
    (63) for_comma -> . COMMA assignment
    (64) for_comma -> . COMMA valor
    (65) for_comma -> . COMMA assignment for_comma

    SEMICOLON       reduce using rule 66 (for_condition -> assignment .)
    COMMA           shift and go to state 86

    for_comma                      shift and go to state 104

state 96

    (67) for_condition -> valor .
    (68) for_condition -> valor . for_comma
    (46) operation -> valor . operador valor
    (63) for_comma -> . COMMA assignment
    (64) for_comma -> . COMMA valor
    (65) for_comma -> . COMMA assignment for_comma
    (25) operador -> . MULTIPLY
    (26) operador -> . DIV
    (27) operador -> . MOD
    (28) operador -> . PLUS
    (29) operador -> . MINUS
    (30) operador -> . EQUAL
    (31) operador -> . NEQUAL
    (32) operador -> . GT
    (33) operador -> . LT
    (34) operador -> . GTE
    (35) operador -> . LTE
    (36) operador -> . AND
    (37) operador -> . OR

    SEMICOLON       reduce using rule 67 (for_condition -> valor .)
    COMMA           shift and go to state 86
    MULTIPLY        shift and go to state 66
    DIV             shift and go to state 67
    MOD             shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    EQUAL           shift and go to state 71
    NEQUAL          shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78

    for_comma                      shift and go to state 105
    operador                       shift and go to state 65

state 97

    (70) for_condition -> empty .

    SEMICOLON       reduce using rule 70 (for_condition -> empty .)


state 98

    (63) for_comma -> COMMA assignment .
    (65) for_comma -> COMMA assignment . for_comma
    (63) for_comma -> . COMMA assignment
    (64) for_comma -> . COMMA valor
    (65) for_comma -> . COMMA assignment for_comma

    SEMICOLON       reduce using rule 63 (for_comma -> COMMA assignment .)
    RPAREN          reduce using rule 63 (for_comma -> COMMA assignment .)
    COMMA           shift and go to state 86

    for_comma                      shift and go to state 106

state 99

    (64) for_comma -> COMMA valor .
    (46) operation -> valor . operador valor
    (25) operador -> . MULTIPLY
    (26) operador -> . DIV
    (27) operador -> . MOD
    (28) operador -> . PLUS
    (29) operador -> . MINUS
    (30) operador -> . EQUAL
    (31) operador -> . NEQUAL
    (32) operador -> . GT
    (33) operador -> . LT
    (34) operador -> . GTE
    (35) operador -> . LTE
    (36) operador -> . AND
    (37) operador -> . OR

    SEMICOLON       reduce using rule 64 (for_comma -> COMMA valor .)
    RPAREN          reduce using rule 64 (for_comma -> COMMA valor .)
    MULTIPLY        shift and go to state 66
    DIV             shift and go to state 67
    MOD             shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    EQUAL           shift and go to state 71
    NEQUAL          shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78

    operador                       shift and go to state 65

state 100

    (51) declaration_list -> NOME ASSIGN valor COMMA declaration_list .

    SEMICOLON       reduce using rule 51 (declaration_list -> NOME ASSIGN valor COMMA declaration_list .)


state 101

    (53) if_statement -> IF LPAREN valor RPAREN LBRACE bloco . RBRACE

    RBRACE          shift and go to state 107


state 102

    (54) while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco . RBRACE

    RBRACE          shift and go to state 108


state 103

    (55) for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON . for_update RPAREN comando
    (71) for_update -> . assignment
    (72) for_update -> . valor
    (73) for_update -> . valor for_comma
    (74) for_update -> . assignment for_comma
    (75) for_update -> . empty
    (47) assignment -> . NOME ASSIGN valor SEMICOLON
    (40) valor -> . NUMBER
    (41) valor -> . NOME
    (42) valor -> . CHARACTER
    (43) valor -> . boolean
    (44) valor -> . operation
    (45) valor -> . parentheses
    (81) empty -> .
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (46) operation -> . valor operador valor
    (19) parentheses -> . LPAREN valor RPAREN

    NOME            shift and go to state 63
    NUMBER          shift and go to state 43
    CHARACTER       shift and go to state 45
    RPAREN          reduce using rule 81 (empty -> .)
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    LPAREN          shift and go to state 51

    for_update                     shift and go to state 109
    assignment                     shift and go to state 110
    valor                          shift and go to state 111
    empty                          shift and go to state 112
    boolean                        shift and go to state 46
    operation                      shift and go to state 47
    parentheses                    shift and go to state 48

state 104

    (69) for_condition -> assignment for_comma .

    SEMICOLON       reduce using rule 69 (for_condition -> assignment for_comma .)


state 105

    (68) for_condition -> valor for_comma .

    SEMICOLON       reduce using rule 68 (for_condition -> valor for_comma .)


state 106

    (65) for_comma -> COMMA assignment for_comma .

    SEMICOLON       reduce using rule 65 (for_comma -> COMMA assignment for_comma .)
    RPAREN          reduce using rule 65 (for_comma -> COMMA assignment for_comma .)


state 107

    (53) if_statement -> IF LPAREN valor RPAREN LBRACE bloco RBRACE .

    NOME            reduce using rule 53 (if_statement -> IF LPAREN valor RPAREN LBRACE bloco RBRACE .)
    IF              reduce using rule 53 (if_statement -> IF LPAREN valor RPAREN LBRACE bloco RBRACE .)
    WHILE           reduce using rule 53 (if_statement -> IF LPAREN valor RPAREN LBRACE bloco RBRACE .)
    FOR             reduce using rule 53 (if_statement -> IF LPAREN valor RPAREN LBRACE bloco RBRACE .)
    BREAK           reduce using rule 53 (if_statement -> IF LPAREN valor RPAREN LBRACE bloco RBRACE .)
    CONTINUE        reduce using rule 53 (if_statement -> IF LPAREN valor RPAREN LBRACE bloco RBRACE .)
    RETURN          reduce using rule 53 (if_statement -> IF LPAREN valor RPAREN LBRACE bloco RBRACE .)
    INT             reduce using rule 53 (if_statement -> IF LPAREN valor RPAREN LBRACE bloco RBRACE .)
    FLOAT           reduce using rule 53 (if_statement -> IF LPAREN valor RPAREN LBRACE bloco RBRACE .)
    CHAR            reduce using rule 53 (if_statement -> IF LPAREN valor RPAREN LBRACE bloco RBRACE .)
    VOID            reduce using rule 53 (if_statement -> IF LPAREN valor RPAREN LBRACE bloco RBRACE .)
    BOOL            reduce using rule 53 (if_statement -> IF LPAREN valor RPAREN LBRACE bloco RBRACE .)
    RBRACE          reduce using rule 53 (if_statement -> IF LPAREN valor RPAREN LBRACE bloco RBRACE .)


state 108

    (54) while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco RBRACE .

    NOME            reduce using rule 54 (while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco RBRACE .)
    IF              reduce using rule 54 (while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco RBRACE .)
    WHILE           reduce using rule 54 (while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco RBRACE .)
    FOR             reduce using rule 54 (while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco RBRACE .)
    BREAK           reduce using rule 54 (while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco RBRACE .)
    CONTINUE        reduce using rule 54 (while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco RBRACE .)
    RETURN          reduce using rule 54 (while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco RBRACE .)
    INT             reduce using rule 54 (while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco RBRACE .)
    FLOAT           reduce using rule 54 (while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco RBRACE .)
    CHAR            reduce using rule 54 (while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco RBRACE .)
    VOID            reduce using rule 54 (while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco RBRACE .)
    BOOL            reduce using rule 54 (while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco RBRACE .)
    RBRACE          reduce using rule 54 (while_statement -> WHILE LPAREN valor RPAREN LBRACE bloco RBRACE .)


state 109

    (55) for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update . RPAREN comando

    RPAREN          shift and go to state 113


state 110

    (71) for_update -> assignment .
    (74) for_update -> assignment . for_comma
    (63) for_comma -> . COMMA assignment
    (64) for_comma -> . COMMA valor
    (65) for_comma -> . COMMA assignment for_comma

    RPAREN          reduce using rule 71 (for_update -> assignment .)
    COMMA           shift and go to state 86

    for_comma                      shift and go to state 114

state 111

    (72) for_update -> valor .
    (73) for_update -> valor . for_comma
    (46) operation -> valor . operador valor
    (63) for_comma -> . COMMA assignment
    (64) for_comma -> . COMMA valor
    (65) for_comma -> . COMMA assignment for_comma
    (25) operador -> . MULTIPLY
    (26) operador -> . DIV
    (27) operador -> . MOD
    (28) operador -> . PLUS
    (29) operador -> . MINUS
    (30) operador -> . EQUAL
    (31) operador -> . NEQUAL
    (32) operador -> . GT
    (33) operador -> . LT
    (34) operador -> . GTE
    (35) operador -> . LTE
    (36) operador -> . AND
    (37) operador -> . OR

    RPAREN          reduce using rule 72 (for_update -> valor .)
    COMMA           shift and go to state 86
    MULTIPLY        shift and go to state 66
    DIV             shift and go to state 67
    MOD             shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    EQUAL           shift and go to state 71
    NEQUAL          shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78

    for_comma                      shift and go to state 115
    operador                       shift and go to state 65

state 112

    (75) for_update -> empty .

    RPAREN          reduce using rule 75 (for_update -> empty .)


state 113

    (55) for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN . comando
    (7) comando -> . declaration
    (8) comando -> . assignment
    (9) comando -> . if_statement
    (10) comando -> . while_statement
    (11) comando -> . for_statement
    (12) comando -> . break_statement
    (13) comando -> . continue_statement
    (14) comando -> . return_statement
    (52) declaration -> . type declaration_list SEMICOLON
    (47) assignment -> . NOME ASSIGN valor SEMICOLON
    (53) if_statement -> . IF LPAREN valor RPAREN LBRACE bloco RBRACE
    (54) while_statement -> . WHILE LPAREN valor RPAREN LBRACE bloco RBRACE
    (55) for_statement -> . FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando
    (78) break_statement -> . BREAK SEMICOLON
    (79) continue_statement -> . CONTINUE SEMICOLON
    (80) return_statement -> . RETURN valor SEMICOLON
    (20) type -> . INT
    (21) type -> . FLOAT
    (22) type -> . CHAR
    (23) type -> . VOID
    (24) type -> . BOOL

    NOME            shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    BREAK           shift and go to state 24
    CONTINUE        shift and go to state 25
    RETURN          shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 29
    VOID            shift and go to state 30
    BOOL            shift and go to state 31

    comando                        shift and go to state 116
    declaration                    shift and go to state 11
    assignment                     shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    type                           shift and go to state 19

state 114

    (74) for_update -> assignment for_comma .

    RPAREN          reduce using rule 74 (for_update -> assignment for_comma .)


state 115

    (73) for_update -> valor for_comma .

    RPAREN          reduce using rule 73 (for_update -> valor for_comma .)


state 116

    (55) for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando .

    NOME            reduce using rule 55 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando .)
    IF              reduce using rule 55 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando .)
    WHILE           reduce using rule 55 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando .)
    FOR             reduce using rule 55 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando .)
    BREAK           reduce using rule 55 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando .)
    CONTINUE        reduce using rule 55 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando .)
    RETURN          reduce using rule 55 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando .)
    INT             reduce using rule 55 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando .)
    FLOAT           reduce using rule 55 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando .)
    CHAR            reduce using rule 55 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando .)
    VOID            reduce using rule 55 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando .)
    BOOL            reduce using rule 55 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando .)
    RBRACE          reduce using rule 55 (for_statement -> FOR LPAREN for_init SEMICOLON for_condition SEMICOLON for_update RPAREN comando .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MULTIPLY in state 89 resolved as shift
WARNING: shift/reduce conflict for DIV in state 89 resolved as shift
WARNING: shift/reduce conflict for MOD in state 89 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 89 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for GT in state 89 resolved as shift
WARNING: shift/reduce conflict for LT in state 89 resolved as shift
WARNING: shift/reduce conflict for GTE in state 89 resolved as shift
WARNING: shift/reduce conflict for LTE in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for OR in state 89 resolved as shift
